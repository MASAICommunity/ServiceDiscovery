/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ServiceDiscovery.Client;
using ServiceDiscovery.Model;

namespace ServiceDiscovery.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDiscoverySearchEngineApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for available services at a specific location
        /// </summary>
        /// <remarks>
        /// The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </remarks>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>SearchResult</returns>
        SearchResult ApiSearchForService (SearchCriteria discoverApis);

        /// <summary>
        /// Search for available services at a specific location
        /// </summary>
        /// <remarks>
        /// The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </remarks>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> ApiSearchForServiceWithHttpInfo (SearchCriteria discoverApis);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search for available services at a specific location
        /// </summary>
        /// <remarks>
        /// The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </remarks>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> ApiSearchForServiceAsync (SearchCriteria discoverApis);

        /// <summary>
        /// Search for available services at a specific location
        /// </summary>
        /// <remarks>
        /// The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </remarks>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> ApiSearchForServiceAsyncWithHttpInfo (SearchCriteria discoverApis);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DiscoverySearchEngineApi : IDiscoverySearchEngineApi
    {
        private ServiceDiscovery.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoverySearchEngineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiscoverySearchEngineApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = ServiceDiscovery.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoverySearchEngineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiscoverySearchEngineApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ServiceDiscovery.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceDiscovery.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search for available services at a specific location The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </summary>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>SearchResult</returns>
        public SearchResult ApiSearchForService (SearchCriteria discoverApis)
        {
             ApiResponse<SearchResult> localVarResponse = ApiSearchForServiceWithHttpInfo(discoverApis);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for available services at a specific location The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </summary>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public ApiResponse< SearchResult > ApiSearchForServiceWithHttpInfo (SearchCriteria discoverApis)
        {
            // verify the required parameter 'discoverApis' is set
            if (discoverApis == null)
                throw new ApiException(400, "Missing required parameter 'discoverApis' when calling DiscoverySearchEngineApi->ApiSearchForService");

            var localVarPath = "/api/searchForServices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (discoverApis != null && discoverApis.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(discoverApis); // http body (model) parameter
            }
            else
            {
                localVarPostBody = discoverApis; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSearchForService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResult)));
        }

        /// <summary>
        /// Search for available services at a specific location The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </summary>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> ApiSearchForServiceAsync (SearchCriteria discoverApis)
        {
             ApiResponse<SearchResult> localVarResponse = await ApiSearchForServiceAsyncWithHttpInfo(discoverApis);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for available services at a specific location The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
        /// </summary>
        /// <exception cref="ServiceDiscovery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discoverApis">Represent a service discovery object, used to performs search queries</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResult>> ApiSearchForServiceAsyncWithHttpInfo (SearchCriteria discoverApis)
        {
            // verify the required parameter 'discoverApis' is set
            if (discoverApis == null)
                throw new ApiException(400, "Missing required parameter 'discoverApis' when calling DiscoverySearchEngineApi->ApiSearchForService");

            var localVarPath = "/api/searchForServices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (discoverApis != null && discoverApis.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(discoverApis); // http body (model) parameter
            }
            else
            {
                localVarPostBody = discoverApis; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSearchForService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResult)));
        }

    }
}
