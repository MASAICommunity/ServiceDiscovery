/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Information containing the service description you want to search for
    /// </summary>
    [DataContract]
    public partial class DiscoveryRequest :  IEquatable<DiscoveryRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Providers
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProvidersEnum
        {
            
            /// <summary>
            /// Enum Apis for value: apis
            /// </summary>
            [EnumMember(Value = "apis")]
            Apis = 1,
            
            /// <summary>
            /// Enum Google for value: google
            /// </summary>
            [EnumMember(Value = "google")]
            Google = 2,
            
            /// <summary>
            /// Enum Ckan for value: ckan
            /// </summary>
            [EnumMember(Value = "ckan")]
            Ckan = 3
        }


        /// <summary>
        /// Search engines selected to search for (If none is selected, then the Service Discovery will search on all search engines)
        /// </summary>
        /// <value>Search engines selected to search for (If none is selected, then the Service Discovery will search on all search engines)</value>
        [DataMember(Name="providers", EmitDefaultValue=false)]
        public List<ProvidersEnum> Providers { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoveryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DiscoveryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoveryRequest" /> class.
        /// </summary>
        /// <param name="Location">Location information.</param>
        /// <param name="Price">Price range information.</param>
        /// <param name="Rating">Rating range information.</param>
        /// <param name="GroupOfModule">Group of module information (taxi|accomodation|train|flight|bus|tourism|all|car_sharing|bike_sharing|train_station_elevator|train_station_parking|car_rental|restaurant|coworkingspace|public_transport) (required).</param>
        /// <param name="AccessKey">Google Custom Search Engine Access Key.</param>
        /// <param name="Providers">Search engines selected to search for (If none is selected, then the Service Discovery will search on all search engines).</param>
        /// <param name="ServiceType">ServiceType (required).</param>
        public DiscoveryRequest(Location Location = default(Location), Price Price = default(Price), Rating Rating = default(Rating), string GroupOfModule = default(string), string AccessKey = default(string), List<ProvidersEnum> Providers = default(List<ProvidersEnum>), DiscoveryRequestServiceType ServiceType = default(DiscoveryRequestServiceType))
        {
            // to ensure "GroupOfModule" is required (not null)
            if (GroupOfModule == null)
            {
                throw new InvalidDataException("GroupOfModule is a required property for DiscoveryRequest and cannot be null");
            }
            else
            {
                this.GroupOfModule = GroupOfModule;
            }
            // to ensure "ServiceType" is required (not null)
            if (ServiceType == null)
            {
                throw new InvalidDataException("ServiceType is a required property for DiscoveryRequest and cannot be null");
            }
            else
            {
                this.ServiceType = ServiceType;
            }
            this.Location = Location;
            this.Price = Price;
            this.Rating = Rating;
            this.AccessKey = AccessKey;
            this.Providers = Providers;
        }
        
        /// <summary>
        /// Location information
        /// </summary>
        /// <value>Location information</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Price range information
        /// </summary>
        /// <value>Price range information</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Price Price { get; set; }

        /// <summary>
        /// Rating range information
        /// </summary>
        /// <value>Rating range information</value>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public Rating Rating { get; set; }

        /// <summary>
        /// Group of module information (taxi|accomodation|train|flight|bus|tourism|all|car_sharing|bike_sharing|train_station_elevator|train_station_parking|car_rental|restaurant|coworkingspace|public_transport)
        /// </summary>
        /// <value>Group of module information (taxi|accomodation|train|flight|bus|tourism|all|car_sharing|bike_sharing|train_station_elevator|train_station_parking|car_rental|restaurant|coworkingspace|public_transport)</value>
        [DataMember(Name="groupOfModule", EmitDefaultValue=false)]
        public string GroupOfModule { get; set; }

        /// <summary>
        /// Google Custom Search Engine Access Key
        /// </summary>
        /// <value>Google Custom Search Engine Access Key</value>
        [DataMember(Name="accessKey", EmitDefaultValue=false)]
        public string AccessKey { get; set; }


        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public DiscoveryRequestServiceType ServiceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveryRequest {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  GroupOfModule: ").Append(GroupOfModule).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiscoveryRequest);
        }

        /// <summary>
        /// Returns true if DiscoveryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscoveryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.GroupOfModule == input.GroupOfModule ||
                    (this.GroupOfModule != null &&
                    this.GroupOfModule.Equals(input.GroupOfModule))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.Providers == input.Providers ||
                    this.Providers != null &&
                    this.Providers.SequenceEqual(input.Providers)
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.GroupOfModule != null)
                    hashCode = hashCode * 59 + this.GroupOfModule.GetHashCode();
                if (this.AccessKey != null)
                    hashCode = hashCode * 59 + this.AccessKey.GetHashCode();
                if (this.Providers != null)
                    hashCode = hashCode * 59 + this.Providers.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
