/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Price range information
    /// </summary>
    [DataContract]
    public partial class Price :  IEquatable<Price>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Price" /> class.
        /// </summary>
        /// <param name="MinPrice">Minimum price.</param>
        /// <param name="MaxPrice">Maximum price.</param>
        public Price(double? MinPrice = default(double?), double? MaxPrice = default(double?))
        {
            this.MinPrice = MinPrice;
            this.MaxPrice = MaxPrice;
        }
        
        /// <summary>
        /// Minimum price
        /// </summary>
        /// <value>Minimum price</value>
        [DataMember(Name="minPrice", EmitDefaultValue=false)]
        public double? MinPrice { get; set; }

        /// <summary>
        /// Maximum price
        /// </summary>
        /// <value>Maximum price</value>
        [DataMember(Name="maxPrice", EmitDefaultValue=false)]
        public double? MaxPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Price);
        }

        /// <summary>
        /// Returns true if Price instances are equal
        /// </summary>
        /// <param name="input">Instance of Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Price input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinPrice == input.MinPrice ||
                    (this.MinPrice != null &&
                    this.MinPrice.Equals(input.MinPrice))
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    (this.MaxPrice != null &&
                    this.MaxPrice.Equals(input.MaxPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinPrice != null)
                    hashCode = hashCode * 59 + this.MinPrice.GetHashCode();
                if (this.MaxPrice != null)
                    hashCode = hashCode * 59 + this.MaxPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
