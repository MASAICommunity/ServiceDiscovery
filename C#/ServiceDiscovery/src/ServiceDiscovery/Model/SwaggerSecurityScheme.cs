/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// The definition of a security scheme that can be used by the operations.
    /// </summary>
    [DataContract]
    public partial class SwaggerSecurityScheme :  IEquatable<SwaggerSecurityScheme>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the type of the security scheme.
        /// </summary>
        /// <value>Gets or sets the type of the security scheme.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 2,
            
            /// <summary>
            /// Enum ApiKey for value: apiKey
            /// </summary>
            [EnumMember(Value = "apiKey")]
            ApiKey = 3,
            
            /// <summary>
            /// Enum Oauth2 for value: oauth2
            /// </summary>
            [EnumMember(Value = "oauth2")]
            Oauth2 = 4
        }

        /// <summary>
        /// Gets or sets the type of the security scheme.
        /// </summary>
        /// <value>Gets or sets the type of the security scheme.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Gets or sets the type of the API key.
        /// </summary>
        /// <value>Gets or sets the type of the API key.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Query for value: query
            /// </summary>
            [EnumMember(Value = "query")]
            Query = 2,
            
            /// <summary>
            /// Enum Header for value: header
            /// </summary>
            [EnumMember(Value = "header")]
            Header = 3
        }

        /// <summary>
        /// Gets or sets the type of the API key.
        /// </summary>
        /// <value>Gets or sets the type of the API key.</value>
        [DataMember(Name="in", EmitDefaultValue=false)]
        public InEnum? _In { get; set; }
        /// <summary>
        /// Gets or sets the used by the OAuth2 security scheme.
        /// </summary>
        /// <value>Gets or sets the used by the OAuth2 security scheme.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlowEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Implicit for value: implicit
            /// </summary>
            [EnumMember(Value = "implicit")]
            Implicit = 2,
            
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 3,
            
            /// <summary>
            /// Enum Application for value: application
            /// </summary>
            [EnumMember(Value = "application")]
            Application = 4,
            
            /// <summary>
            /// Enum AccessCode for value: accessCode
            /// </summary>
            [EnumMember(Value = "accessCode")]
            AccessCode = 5
        }

        /// <summary>
        /// Gets or sets the used by the OAuth2 security scheme.
        /// </summary>
        /// <value>Gets or sets the used by the OAuth2 security scheme.</value>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public FlowEnum? Flow { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerSecurityScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SwaggerSecurityScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerSecurityScheme" /> class.
        /// </summary>
        /// <param name="Type">Gets or sets the type of the security scheme. (required).</param>
        /// <param name="Description">Gets or sets the short description for security scheme..</param>
        /// <param name="Name">Gets or sets the name of the header or query parameter to be used to transmit the API key..</param>
        /// <param name="_In">Gets or sets the type of the API key..</param>
        /// <param name="Flow">Gets or sets the used by the OAuth2 security scheme..</param>
        /// <param name="AuthorizationUrl">Gets or sets the authorization URL to be used for this flow..</param>
        /// <param name="TokenUrl">Gets or sets the token URL to be used for this flow. ..</param>
        /// <param name="Scopes">Gets the available scopes for the OAuth2 security scheme..</param>
        public SwaggerSecurityScheme(TypeEnum Type = default(TypeEnum), string Description = default(string), string Name = default(string), InEnum? _In = default(InEnum?), FlowEnum? Flow = default(FlowEnum?), string AuthorizationUrl = default(string), string TokenUrl = default(string), Dictionary<string, string> Scopes = default(Dictionary<string, string>))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for SwaggerSecurityScheme and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Description = Description;
            this.Name = Name;
            this._In = _In;
            this.Flow = Flow;
            this.AuthorizationUrl = AuthorizationUrl;
            this.TokenUrl = TokenUrl;
            this.Scopes = Scopes;
        }
        

        /// <summary>
        /// Gets or sets the short description for security scheme.
        /// </summary>
        /// <value>Gets or sets the short description for security scheme.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the name of the header or query parameter to be used to transmit the API key.
        /// </summary>
        /// <value>Gets or sets the name of the header or query parameter to be used to transmit the API key.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// Gets or sets the authorization URL to be used for this flow.
        /// </summary>
        /// <value>Gets or sets the authorization URL to be used for this flow.</value>
        [DataMember(Name="authorizationUrl", EmitDefaultValue=false)]
        public string AuthorizationUrl { get; set; }

        /// <summary>
        /// Gets or sets the token URL to be used for this flow. .
        /// </summary>
        /// <value>Gets or sets the token URL to be used for this flow. .</value>
        [DataMember(Name="tokenUrl", EmitDefaultValue=false)]
        public string TokenUrl { get; set; }

        /// <summary>
        /// Gets the available scopes for the OAuth2 security scheme.
        /// </summary>
        /// <value>Gets the available scopes for the OAuth2 security scheme.</value>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public Dictionary<string, string> Scopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwaggerSecurityScheme {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _In: ").Append(_In).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  AuthorizationUrl: ").Append(AuthorizationUrl).Append("\n");
            sb.Append("  TokenUrl: ").Append(TokenUrl).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaggerSecurityScheme);
        }

        /// <summary>
        /// Returns true if SwaggerSecurityScheme instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaggerSecurityScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaggerSecurityScheme input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._In == input._In ||
                    (this._In != null &&
                    this._In.Equals(input._In))
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.AuthorizationUrl == input.AuthorizationUrl ||
                    (this.AuthorizationUrl != null &&
                    this.AuthorizationUrl.Equals(input.AuthorizationUrl))
                ) && 
                (
                    this.TokenUrl == input.TokenUrl ||
                    (this.TokenUrl != null &&
                    this.TokenUrl.Equals(input.TokenUrl))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this._In != null)
                    hashCode = hashCode * 59 + this._In.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.AuthorizationUrl != null)
                    hashCode = hashCode * 59 + this.AuthorizationUrl.GetHashCode();
                if (this.TokenUrl != null)
                    hashCode = hashCode * 59 + this.TokenUrl.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
