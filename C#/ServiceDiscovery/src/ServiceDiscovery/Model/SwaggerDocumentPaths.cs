/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// SwaggerDocumentPaths
    /// </summary>
    [DataContract]
    public partial class SwaggerDocumentPaths :  IEquatable<SwaggerDocumentPaths>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerDocumentPaths" /> class.
        /// </summary>
        /// <param name="Undefined">Undefined.</param>
        /// <param name="Get">Get.</param>
        /// <param name="Post">Post.</param>
        /// <param name="Put">Put.</param>
        /// <param name="Delete">Delete.</param>
        /// <param name="Options">Options.</param>
        /// <param name="Head">Head.</param>
        /// <param name="Patch">Patch.</param>
        public SwaggerDocumentPaths(SwaggerOperation Undefined = default(SwaggerOperation), SwaggerOperation Get = default(SwaggerOperation), SwaggerOperation Post = default(SwaggerOperation), SwaggerOperation Put = default(SwaggerOperation), SwaggerOperation Delete = default(SwaggerOperation), SwaggerOperation Options = default(SwaggerOperation), SwaggerOperation Head = default(SwaggerOperation), SwaggerOperation Patch = default(SwaggerOperation))
        {
            this.Undefined = Undefined;
            this.Get = Get;
            this.Post = Post;
            this.Put = Put;
            this.Delete = Delete;
            this.Options = Options;
            this.Head = Head;
            this.Patch = Patch;
        }
        
        /// <summary>
        /// Gets or Sets Undefined
        /// </summary>
        [DataMember(Name="undefined", EmitDefaultValue=false)]
        public SwaggerOperation Undefined { get; set; }

        /// <summary>
        /// Gets or Sets Get
        /// </summary>
        [DataMember(Name="get", EmitDefaultValue=false)]
        public SwaggerOperation Get { get; set; }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public SwaggerOperation Post { get; set; }

        /// <summary>
        /// Gets or Sets Put
        /// </summary>
        [DataMember(Name="put", EmitDefaultValue=false)]
        public SwaggerOperation Put { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public SwaggerOperation Delete { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public SwaggerOperation Options { get; set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [DataMember(Name="head", EmitDefaultValue=false)]
        public SwaggerOperation Head { get; set; }

        /// <summary>
        /// Gets or Sets Patch
        /// </summary>
        [DataMember(Name="patch", EmitDefaultValue=false)]
        public SwaggerOperation Patch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwaggerDocumentPaths {\n");
            sb.Append("  Undefined: ").Append(Undefined).Append("\n");
            sb.Append("  Get: ").Append(Get).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Put: ").Append(Put).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  Patch: ").Append(Patch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaggerDocumentPaths);
        }

        /// <summary>
        /// Returns true if SwaggerDocumentPaths instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaggerDocumentPaths to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaggerDocumentPaths input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Undefined == input.Undefined ||
                    (this.Undefined != null &&
                    this.Undefined.Equals(input.Undefined))
                ) && 
                (
                    this.Get == input.Get ||
                    (this.Get != null &&
                    this.Get.Equals(input.Get))
                ) && 
                (
                    this.Post == input.Post ||
                    (this.Post != null &&
                    this.Post.Equals(input.Post))
                ) && 
                (
                    this.Put == input.Put ||
                    (this.Put != null &&
                    this.Put.Equals(input.Put))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Head == input.Head ||
                    (this.Head != null &&
                    this.Head.Equals(input.Head))
                ) && 
                (
                    this.Patch == input.Patch ||
                    (this.Patch != null &&
                    this.Patch.Equals(input.Patch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Undefined != null)
                    hashCode = hashCode * 59 + this.Undefined.GetHashCode();
                if (this.Get != null)
                    hashCode = hashCode * 59 + this.Get.GetHashCode();
                if (this.Post != null)
                    hashCode = hashCode * 59 + this.Post.GetHashCode();
                if (this.Put != null)
                    hashCode = hashCode * 59 + this.Put.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Head != null)
                    hashCode = hashCode * 59 + this.Head.GetHashCode();
                if (this.Patch != null)
                    hashCode = hashCode * 59 + this.Patch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
