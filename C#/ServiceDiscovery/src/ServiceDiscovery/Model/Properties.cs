/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Properties
    /// </summary>
    [DataContract]
    public partial class Properties :  IEquatable<Properties>, IValidatableObject
    {
        /// <summary>
        /// Type of propery
        /// </summary>
        /// <value>Type of propery</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Swagger for value: Swagger
            /// </summary>
            [EnumMember(Value = "Swagger")]
            Swagger = 1,
            
            /// <summary>
            /// Enum RAML for value: RAML
            /// </summary>
            [EnumMember(Value = "RAML")]
            RAML = 2,
            
            /// <summary>
            /// Enum Blueprint for value: Blueprint
            /// </summary>
            [EnumMember(Value = "Blueprint")]
            Blueprint = 3,
            
            /// <summary>
            /// Enum WADL for value: WADL
            /// </summary>
            [EnumMember(Value = "WADL")]
            WADL = 4,
            
            /// <summary>
            /// Enum WSDL for value: WSDL
            /// </summary>
            [EnumMember(Value = "WSDL")]
            WSDL = 5,
            
            /// <summary>
            /// Enum TermsOfService for value: TermsOfService
            /// </summary>
            [EnumMember(Value = "TermsOfService")]
            TermsOfService = 6,
            
            /// <summary>
            /// Enum InterfaceLicense for value: InterfaceLicense
            /// </summary>
            [EnumMember(Value = "InterfaceLicense")]
            InterfaceLicense = 7,
            
            /// <summary>
            /// Enum StatusPage for value: StatusPage
            /// </summary>
            [EnumMember(Value = "StatusPage")]
            StatusPage = 8,
            
            /// <summary>
            /// Enum Pricing for value: Pricing
            /// </summary>
            [EnumMember(Value = "Pricing")]
            Pricing = 9,
            
            /// <summary>
            /// Enum Forums for value: Forums
            /// </summary>
            [EnumMember(Value = "Forums")]
            Forums = 10,
            
            /// <summary>
            /// Enum AlertsTwitterHandle for value: AlertsTwitterHandle
            /// </summary>
            [EnumMember(Value = "AlertsTwitterHandle")]
            AlertsTwitterHandle = 11
        }

        /// <summary>
        /// Type of propery
        /// </summary>
        /// <value>Type of propery</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Properties" /> class.
        /// </summary>
        /// <param name="Type">Type of propery.</param>
        /// <param name="Url">URL of property.</param>
        public Properties(TypeEnum? Type = default(TypeEnum?), string Url = default(string))
        {
            this.Type = Type;
            this.Url = Url;
        }
        

        /// <summary>
        /// URL of property
        /// </summary>
        /// <value>URL of property</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Properties {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Properties);
        }

        /// <summary>
        /// Returns true if Properties instances are equal
        /// </summary>
        /// <param name="input">Instance of Properties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Properties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
