/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Describes a JSON web service.
    /// </summary>
    [DataContract]
    public partial class SwaggerDocument :  IEquatable<SwaggerDocument>, IValidatableObject
    {
        /// <summary>
        /// Defines Schemes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemesEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            [EnumMember(Value = "http")]
            Http = 2,
            
            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            [EnumMember(Value = "https")]
            Https = 3,
            
            /// <summary>
            /// Enum Ws for value: ws
            /// </summary>
            [EnumMember(Value = "ws")]
            Ws = 4,
            
            /// <summary>
            /// Enum Wss for value: wss
            /// </summary>
            [EnumMember(Value = "wss")]
            Wss = 5
        }


        /// <summary>
        /// Gets or sets the schemes.
        /// </summary>
        /// <value>Gets or sets the schemes.</value>
        [DataMember(Name="schemes", EmitDefaultValue=false)]
        public List<SchemesEnum> Schemes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerDocument" /> class.
        /// </summary>
        /// <param name="XGenerator">Gets or sets the Swagger generator information..</param>
        /// <param name="Swagger">Gets or sets the Swagger specification version being used..</param>
        /// <param name="Info">Gets or sets the metadata about the API..</param>
        /// <param name="Host">Gets or sets the host (name or ip) serving the API..</param>
        /// <param name="BasePath">Gets or sets the base path on which the API is served, which is relative to the {NSwag.SwaggerDocument.Host}..</param>
        /// <param name="Schemes">Gets or sets the schemes..</param>
        /// <param name="Consumes">Gets or sets a list of MIME types the operation can consume..</param>
        /// <param name="Produces">Gets or sets a list of MIME types the operation can produce..</param>
        /// <param name="Paths">Gets or sets the operations..</param>
        /// <param name="Definitions">Gets or sets the types..</param>
        /// <param name="Parameters">Gets or sets the parameters which can be used for all operations..</param>
        /// <param name="Responses">Gets or sets the responses which can be used for all operations..</param>
        /// <param name="SecurityDefinitions">Gets or sets the security definitions..</param>
        /// <param name="Security">Gets or sets a security description..</param>
        /// <param name="Tags">Gets or sets the description..</param>
        /// <param name="ExternalDocs">Gets or sets the external documentation..</param>
        public SwaggerDocument(string XGenerator = default(string), string Swagger = default(string), SwaggerInfo Info = default(SwaggerInfo), string Host = default(string), string BasePath = default(string), List<SchemesEnum> Schemes = default(List<SchemesEnum>), List<string> Consumes = default(List<string>), List<string> Produces = default(List<string>), Dictionary<string, SwaggerDocumentPaths> Paths = default(Dictionary<string, SwaggerDocumentPaths>), Dictionary<string, JsonSchema4> Definitions = default(Dictionary<string, JsonSchema4>), Dictionary<string, SwaggerParameter> Parameters = default(Dictionary<string, SwaggerParameter>), Dictionary<string, SwaggerResponse> Responses = default(Dictionary<string, SwaggerResponse>), Dictionary<string, SwaggerSecurityScheme> SecurityDefinitions = default(Dictionary<string, SwaggerSecurityScheme>), List<Dictionary<string, List<string>>> Security = default(List<Dictionary<string, List<string>>>), List<SwaggerTag> Tags = default(List<SwaggerTag>), SwaggerExternalDocumentation ExternalDocs = default(SwaggerExternalDocumentation))
        {
            this.XGenerator = XGenerator;
            this.Swagger = Swagger;
            this.Info = Info;
            this.Host = Host;
            this.BasePath = BasePath;
            this.Schemes = Schemes;
            this.Consumes = Consumes;
            this.Produces = Produces;
            this.Paths = Paths;
            this.Definitions = Definitions;
            this.Parameters = Parameters;
            this.Responses = Responses;
            this.SecurityDefinitions = SecurityDefinitions;
            this.Security = Security;
            this.Tags = Tags;
            this.ExternalDocs = ExternalDocs;
        }
        
        /// <summary>
        /// Gets or sets the Swagger generator information.
        /// </summary>
        /// <value>Gets or sets the Swagger generator information.</value>
        [DataMember(Name="x-generator", EmitDefaultValue=false)]
        public string XGenerator { get; set; }

        /// <summary>
        /// Gets or sets the Swagger specification version being used.
        /// </summary>
        /// <value>Gets or sets the Swagger specification version being used.</value>
        [DataMember(Name="swagger", EmitDefaultValue=false)]
        public string Swagger { get; set; }

        /// <summary>
        /// Gets or sets the metadata about the API.
        /// </summary>
        /// <value>Gets or sets the metadata about the API.</value>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public SwaggerInfo Info { get; set; }

        /// <summary>
        /// Gets or sets the host (name or ip) serving the API.
        /// </summary>
        /// <value>Gets or sets the host (name or ip) serving the API.</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets the base path on which the API is served, which is relative to the {NSwag.SwaggerDocument.Host}.
        /// </summary>
        /// <value>Gets or sets the base path on which the API is served, which is relative to the {NSwag.SwaggerDocument.Host}.</value>
        [DataMember(Name="basePath", EmitDefaultValue=false)]
        public string BasePath { get; set; }


        /// <summary>
        /// Gets or sets a list of MIME types the operation can consume.
        /// </summary>
        /// <value>Gets or sets a list of MIME types the operation can consume.</value>
        [DataMember(Name="consumes", EmitDefaultValue=false)]
        public List<string> Consumes { get; set; }

        /// <summary>
        /// Gets or sets a list of MIME types the operation can produce.
        /// </summary>
        /// <value>Gets or sets a list of MIME types the operation can produce.</value>
        [DataMember(Name="produces", EmitDefaultValue=false)]
        public List<string> Produces { get; set; }

        /// <summary>
        /// Gets or sets the operations.
        /// </summary>
        /// <value>Gets or sets the operations.</value>
        [DataMember(Name="paths", EmitDefaultValue=false)]
        public Dictionary<string, SwaggerDocumentPaths> Paths { get; set; }

        /// <summary>
        /// Gets or sets the types.
        /// </summary>
        /// <value>Gets or sets the types.</value>
        [DataMember(Name="definitions", EmitDefaultValue=false)]
        public Dictionary<string, JsonSchema4> Definitions { get; set; }

        /// <summary>
        /// Gets or sets the parameters which can be used for all operations.
        /// </summary>
        /// <value>Gets or sets the parameters which can be used for all operations.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, SwaggerParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or sets the responses which can be used for all operations.
        /// </summary>
        /// <value>Gets or sets the responses which can be used for all operations.</value>
        [DataMember(Name="responses", EmitDefaultValue=false)]
        public Dictionary<string, SwaggerResponse> Responses { get; set; }

        /// <summary>
        /// Gets or sets the security definitions.
        /// </summary>
        /// <value>Gets or sets the security definitions.</value>
        [DataMember(Name="securityDefinitions", EmitDefaultValue=false)]
        public Dictionary<string, SwaggerSecurityScheme> SecurityDefinitions { get; set; }

        /// <summary>
        /// Gets or sets a security description.
        /// </summary>
        /// <value>Gets or sets a security description.</value>
        [DataMember(Name="security", EmitDefaultValue=false)]
        public List<Dictionary<string, List<string>>> Security { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<SwaggerTag> Tags { get; set; }

        /// <summary>
        /// Gets or sets the external documentation.
        /// </summary>
        /// <value>Gets or sets the external documentation.</value>
        [DataMember(Name="externalDocs", EmitDefaultValue=false)]
        public SwaggerExternalDocumentation ExternalDocs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwaggerDocument {\n");
            sb.Append("  XGenerator: ").Append(XGenerator).Append("\n");
            sb.Append("  Swagger: ").Append(Swagger).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  BasePath: ").Append(BasePath).Append("\n");
            sb.Append("  Schemes: ").Append(Schemes).Append("\n");
            sb.Append("  Consumes: ").Append(Consumes).Append("\n");
            sb.Append("  Produces: ").Append(Produces).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  Definitions: ").Append(Definitions).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Responses: ").Append(Responses).Append("\n");
            sb.Append("  SecurityDefinitions: ").Append(SecurityDefinitions).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ExternalDocs: ").Append(ExternalDocs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaggerDocument);
        }

        /// <summary>
        /// Returns true if SwaggerDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaggerDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaggerDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.XGenerator == input.XGenerator ||
                    (this.XGenerator != null &&
                    this.XGenerator.Equals(input.XGenerator))
                ) && 
                (
                    this.Swagger == input.Swagger ||
                    (this.Swagger != null &&
                    this.Swagger.Equals(input.Swagger))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.BasePath == input.BasePath ||
                    (this.BasePath != null &&
                    this.BasePath.Equals(input.BasePath))
                ) && 
                (
                    this.Schemes == input.Schemes ||
                    this.Schemes != null &&
                    this.Schemes.SequenceEqual(input.Schemes)
                ) && 
                (
                    this.Consumes == input.Consumes ||
                    this.Consumes != null &&
                    this.Consumes.SequenceEqual(input.Consumes)
                ) && 
                (
                    this.Produces == input.Produces ||
                    this.Produces != null &&
                    this.Produces.SequenceEqual(input.Produces)
                ) && 
                (
                    this.Paths == input.Paths ||
                    this.Paths != null &&
                    this.Paths.SequenceEqual(input.Paths)
                ) && 
                (
                    this.Definitions == input.Definitions ||
                    this.Definitions != null &&
                    this.Definitions.SequenceEqual(input.Definitions)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Responses == input.Responses ||
                    this.Responses != null &&
                    this.Responses.SequenceEqual(input.Responses)
                ) && 
                (
                    this.SecurityDefinitions == input.SecurityDefinitions ||
                    this.SecurityDefinitions != null &&
                    this.SecurityDefinitions.SequenceEqual(input.SecurityDefinitions)
                ) && 
                (
                    this.Security == input.Security ||
                    this.Security != null &&
                    this.Security.SequenceEqual(input.Security)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ExternalDocs == input.ExternalDocs ||
                    (this.ExternalDocs != null &&
                    this.ExternalDocs.Equals(input.ExternalDocs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.XGenerator != null)
                    hashCode = hashCode * 59 + this.XGenerator.GetHashCode();
                if (this.Swagger != null)
                    hashCode = hashCode * 59 + this.Swagger.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.BasePath != null)
                    hashCode = hashCode * 59 + this.BasePath.GetHashCode();
                if (this.Schemes != null)
                    hashCode = hashCode * 59 + this.Schemes.GetHashCode();
                if (this.Consumes != null)
                    hashCode = hashCode * 59 + this.Consumes.GetHashCode();
                if (this.Produces != null)
                    hashCode = hashCode * 59 + this.Produces.GetHashCode();
                if (this.Paths != null)
                    hashCode = hashCode * 59 + this.Paths.GetHashCode();
                if (this.Definitions != null)
                    hashCode = hashCode * 59 + this.Definitions.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Responses != null)
                    hashCode = hashCode * 59 + this.Responses.GetHashCode();
                if (this.SecurityDefinitions != null)
                    hashCode = hashCode * 59 + this.SecurityDefinitions.GetHashCode();
                if (this.Security != null)
                    hashCode = hashCode * 59 + this.Security.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.ExternalDocs != null)
                    hashCode = hashCode * 59 + this.ExternalDocs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
