/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Search request object
    /// </summary>
    [DataContract]
    public partial class SearchCriteria :  IEquatable<SearchCriteria>, IValidatableObject
    {
        /// <summary>
        /// Environment to search services
        /// </summary>
        /// <value>Environment to search services</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnvironmentEnum
        {
            
            /// <summary>
            /// Enum SANDBOX for value: SANDBOX
            /// </summary>
            [EnumMember(Value = "SANDBOX")]
            SANDBOX = 1,
            
            /// <summary>
            /// Enum PRODUCTION for value: PRODUCTION
            /// </summary>
            [EnumMember(Value = "PRODUCTION")]
            PRODUCTION = 2
        }

        /// <summary>
        /// Environment to search services
        /// </summary>
        /// <value>Environment to search services</value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public EnvironmentEnum Environment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteria" /> class.
        /// </summary>
        /// <param name="Environment">Environment to search services (required).</param>
        /// <param name="ServiceSearchCriteria">List containing each type of service to look for (required).</param>
        public SearchCriteria(EnvironmentEnum Environment = default(EnvironmentEnum), List<DiscoveryRequest> ServiceSearchCriteria = default(List<DiscoveryRequest>))
        {
            // to ensure "Environment" is required (not null)
            if (Environment == null)
            {
                throw new InvalidDataException("Environment is a required property for SearchCriteria and cannot be null");
            }
            else
            {
                this.Environment = Environment;
            }
            // to ensure "ServiceSearchCriteria" is required (not null)
            if (ServiceSearchCriteria == null)
            {
                throw new InvalidDataException("ServiceSearchCriteria is a required property for SearchCriteria and cannot be null");
            }
            else
            {
                this.ServiceSearchCriteria = ServiceSearchCriteria;
            }
        }
        

        /// <summary>
        /// List containing each type of service to look for
        /// </summary>
        /// <value>List containing each type of service to look for</value>
        [DataMember(Name="serviceSearchCriteria", EmitDefaultValue=false)]
        public List<DiscoveryRequest> ServiceSearchCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteria {\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  ServiceSearchCriteria: ").Append(ServiceSearchCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteria);
        }

        /// <summary>
        /// Returns true if SearchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.ServiceSearchCriteria == input.ServiceSearchCriteria ||
                    this.ServiceSearchCriteria != null &&
                    this.ServiceSearchCriteria.SequenceEqual(input.ServiceSearchCriteria)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.ServiceSearchCriteria != null)
                    hashCode = hashCode * 59 + this.ServiceSearchCriteria.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
