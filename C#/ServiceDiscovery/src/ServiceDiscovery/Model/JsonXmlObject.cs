/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// JsonXmlObject
    /// </summary>
    [DataContract]
    public partial class JsonXmlObject :  IEquatable<JsonXmlObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonXmlObject" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Wrapped">Wrapped.</param>
        /// <param name="_Namespace">_Namespace.</param>
        /// <param name="Prefix">Prefix.</param>
        /// <param name="Attribute">Attribute.</param>
        public JsonXmlObject(string Name = default(string), bool? Wrapped = default(bool?), string _Namespace = default(string), string Prefix = default(string), bool? Attribute = default(bool?))
        {
            this.Name = Name;
            this.Wrapped = Wrapped;
            this._Namespace = _Namespace;
            this.Prefix = Prefix;
            this.Attribute = Attribute;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Wrapped
        /// </summary>
        [DataMember(Name="wrapped", EmitDefaultValue=false)]
        public bool? Wrapped { get; set; }

        /// <summary>
        /// Gets or Sets _Namespace
        /// </summary>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string _Namespace { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name="attribute", EmitDefaultValue=false)]
        public bool? Attribute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonXmlObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Wrapped: ").Append(Wrapped).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonXmlObject);
        }

        /// <summary>
        /// Returns true if JsonXmlObject instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonXmlObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonXmlObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Wrapped == input.Wrapped ||
                    (this.Wrapped != null &&
                    this.Wrapped.Equals(input.Wrapped))
                ) && 
                (
                    this._Namespace == input._Namespace ||
                    (this._Namespace != null &&
                    this._Namespace.Equals(input._Namespace))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Wrapped != null)
                    hashCode = hashCode * 59 + this.Wrapped.GetHashCode();
                if (this._Namespace != null)
                    hashCode = hashCode * 59 + this._Namespace.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.Attribute != null)
                    hashCode = hashCode * 59 + this.Attribute.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
