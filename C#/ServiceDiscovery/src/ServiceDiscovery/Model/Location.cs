/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Location information (Search for services within one box area)
    /// </summary>
    [DataContract]
    public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="MinLatitude">Bottom left latitude.</param>
        /// <param name="MinLongitude">Bottom left longitude.</param>
        /// <param name="MaxLatitude">Top right latitude.</param>
        /// <param name="MaxLongitude">Top right longitude.</param>
        /// <param name="Countries">List of ISO 3166-1 Country Codes.</param>
        /// <param name="Cities">List of cities to search for.</param>
        public Location(double? MinLatitude = default(double?), double? MinLongitude = default(double?), double? MaxLatitude = default(double?), double? MaxLongitude = default(double?), List<string> Countries = default(List<string>), List<string> Cities = default(List<string>))
        {
            this.MinLatitude = MinLatitude;
            this.MinLongitude = MinLongitude;
            this.MaxLatitude = MaxLatitude;
            this.MaxLongitude = MaxLongitude;
            this.Countries = Countries;
            this.Cities = Cities;
        }
        
        /// <summary>
        /// Bottom left latitude
        /// </summary>
        /// <value>Bottom left latitude</value>
        [DataMember(Name="minLatitude", EmitDefaultValue=false)]
        public double? MinLatitude { get; set; }

        /// <summary>
        /// Bottom left longitude
        /// </summary>
        /// <value>Bottom left longitude</value>
        [DataMember(Name="minLongitude", EmitDefaultValue=false)]
        public double? MinLongitude { get; set; }

        /// <summary>
        /// Top right latitude
        /// </summary>
        /// <value>Top right latitude</value>
        [DataMember(Name="maxLatitude", EmitDefaultValue=false)]
        public double? MaxLatitude { get; set; }

        /// <summary>
        /// Top right longitude
        /// </summary>
        /// <value>Top right longitude</value>
        [DataMember(Name="maxLongitude", EmitDefaultValue=false)]
        public double? MaxLongitude { get; set; }

        /// <summary>
        /// List of ISO 3166-1 Country Codes
        /// </summary>
        /// <value>List of ISO 3166-1 Country Codes</value>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// List of cities to search for
        /// </summary>
        /// <value>List of cities to search for</value>
        [DataMember(Name="cities", EmitDefaultValue=false)]
        public List<string> Cities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  MinLatitude: ").Append(MinLatitude).Append("\n");
            sb.Append("  MinLongitude: ").Append(MinLongitude).Append("\n");
            sb.Append("  MaxLatitude: ").Append(MaxLatitude).Append("\n");
            sb.Append("  MaxLongitude: ").Append(MaxLongitude).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Cities: ").Append(Cities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinLatitude == input.MinLatitude ||
                    (this.MinLatitude != null &&
                    this.MinLatitude.Equals(input.MinLatitude))
                ) && 
                (
                    this.MinLongitude == input.MinLongitude ||
                    (this.MinLongitude != null &&
                    this.MinLongitude.Equals(input.MinLongitude))
                ) && 
                (
                    this.MaxLatitude == input.MaxLatitude ||
                    (this.MaxLatitude != null &&
                    this.MaxLatitude.Equals(input.MaxLatitude))
                ) && 
                (
                    this.MaxLongitude == input.MaxLongitude ||
                    (this.MaxLongitude != null &&
                    this.MaxLongitude.Equals(input.MaxLongitude))
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.Cities == input.Cities ||
                    this.Cities != null &&
                    this.Cities.SequenceEqual(input.Cities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinLatitude != null)
                    hashCode = hashCode * 59 + this.MinLatitude.GetHashCode();
                if (this.MinLongitude != null)
                    hashCode = hashCode * 59 + this.MinLongitude.GetHashCode();
                if (this.MaxLatitude != null)
                    hashCode = hashCode * 59 + this.MaxLatitude.GetHashCode();
                if (this.MaxLongitude != null)
                    hashCode = hashCode * 59 + this.MaxLongitude.GetHashCode();
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.Cities != null)
                    hashCode = hashCode * 59 + this.Cities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
