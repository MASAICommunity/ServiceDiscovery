/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// The web service description.
    /// </summary>
    [DataContract]
    public partial class SwaggerInfo :  IEquatable<SwaggerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SwaggerInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerInfo" /> class.
        /// </summary>
        /// <param name="Title">Gets or sets the title. (required).</param>
        /// <param name="Description">Gets or sets the description..</param>
        /// <param name="TermsOfService">Gets or sets the terms of service..</param>
        /// <param name="Contact">Gets or sets the contact information..</param>
        /// <param name="License">Gets or sets the license information..</param>
        /// <param name="Version">Gets or sets the API version. (required).</param>
        public SwaggerInfo(string Title = default(string), string Description = default(string), string TermsOfService = default(string), SwaggerContact Contact = default(SwaggerContact), SwaggerLicense License = default(SwaggerLicense), string Version = default(string))
        {
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for SwaggerInfo and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Version" is required (not null)
            if (Version == null)
            {
                throw new InvalidDataException("Version is a required property for SwaggerInfo and cannot be null");
            }
            else
            {
                this.Version = Version;
            }
            this.Description = Description;
            this.TermsOfService = TermsOfService;
            this.Contact = Contact;
            this.License = License;
        }
        
        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        /// <value>Gets or sets the title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the terms of service.
        /// </summary>
        /// <value>Gets or sets the terms of service.</value>
        [DataMember(Name="termsOfService", EmitDefaultValue=false)]
        public string TermsOfService { get; set; }

        /// <summary>
        /// Gets or sets the contact information.
        /// </summary>
        /// <value>Gets or sets the contact information.</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public SwaggerContact Contact { get; set; }

        /// <summary>
        /// Gets or sets the license information.
        /// </summary>
        /// <value>Gets or sets the license information.</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public SwaggerLicense License { get; set; }

        /// <summary>
        /// Gets or sets the API version.
        /// </summary>
        /// <value>Gets or sets the API version.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwaggerInfo {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TermsOfService: ").Append(TermsOfService).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaggerInfo);
        }

        /// <summary>
        /// Returns true if SwaggerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaggerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaggerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TermsOfService == input.TermsOfService ||
                    (this.TermsOfService != null &&
                    this.TermsOfService.Equals(input.TermsOfService))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TermsOfService != null)
                    hashCode = hashCode * 59 + this.TermsOfService.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
