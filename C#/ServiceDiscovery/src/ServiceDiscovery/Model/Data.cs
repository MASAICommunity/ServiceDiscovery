/* 
 * MASAI Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ServiceDiscovery.Client.SwaggerDateConverter;

namespace ServiceDiscovery.Model
{
    /// <summary>
    /// Data
    /// </summary>
    [DataContract]
    public partial class Data :  IEquatable<Data>, IValidatableObject
    {
        /// <summary>
        /// Plan conditions of the service
        /// </summary>
        /// <value>Plan conditions of the service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlanConditionsEnum
        {
            
            /// <summary>
            /// Enum Free for value: free
            /// </summary>
            [EnumMember(Value = "free")]
            Free = 1,
            
            /// <summary>
            /// Enum Paid for value: paid
            /// </summary>
            [EnumMember(Value = "paid")]
            Paid = 2
        }

        /// <summary>
        /// Plan conditions of the service
        /// </summary>
        /// <value>Plan conditions of the service</value>
        [DataMember(Name="planConditions", EmitDefaultValue=false)]
        public PlanConditionsEnum? PlanConditions { get; set; }
        /// <summary>
        /// Defines LevelOfService
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelOfServiceEnum
        {
            
            /// <summary>
            /// Enum VIP for value: VIP
            /// </summary>
            [EnumMember(Value = "VIP")]
            VIP = 1,
            
            /// <summary>
            /// Enum Economy for value: Economy
            /// </summary>
            [EnumMember(Value = "Economy")]
            Economy = 2,
            
            /// <summary>
            /// Enum Regular for value: Regular
            /// </summary>
            [EnumMember(Value = "Regular")]
            Regular = 3,
            
            /// <summary>
            /// Enum Luxury for value: Luxury
            /// </summary>
            [EnumMember(Value = "Luxury")]
            Luxury = 4,
            
            /// <summary>
            /// Enum Executive for value: Executive
            /// </summary>
            [EnumMember(Value = "Executive")]
            Executive = 5,
            
            /// <summary>
            /// Enum Exclusive for value: Exclusive
            /// </summary>
            [EnumMember(Value = "Exclusive")]
            Exclusive = 6,
            
            /// <summary>
            /// Enum Deluxe for value: Deluxe
            /// </summary>
            [EnumMember(Value = "Deluxe")]
            Deluxe = 7
        }


        /// <summary>
        /// Level of service provided
        /// </summary>
        /// <value>Level of service provided</value>
        [DataMember(Name="levelOfService", EmitDefaultValue=false)]
        public List<LevelOfServiceEnum> LevelOfService { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Data" /> class.
        /// </summary>
        /// <param name="PlanConditions">Plan conditions of the service.</param>
        /// <param name="Swagger">Swagger file information.</param>
        /// <param name="Properties">Properties service information.</param>
        /// <param name="Contact">Contact service information.</param>
        /// <param name="Maintainers">Maintainers service informatoin.</param>
        /// <param name="Tags">Tags service information.</param>
        /// <param name="IntegrationMode">Information related to how the service is integrated.</param>
        /// <param name="LevelOfService">Level of service provided.</param>
        /// <param name="Name">Name of the service.</param>
        /// <param name="Description">Description of the service.</param>
        /// <param name="Image">Image related of the service.</param>
        /// <param name="BaseURL">Base URL of the service.</param>
        /// <param name="HumanURL">URL of the human readable documentation.</param>
        /// <param name="AppName">App name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;Travel Concierge\&quot;.</param>
        /// <param name="PackageName">Package name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;com.serviceprovider.travelconcierge\&quot;.</param>
        /// <param name="DeeplinkURL">Base deeplink URL of the service to integrate directly with application. (This attribute will appear only if integration mode is \&quot;app\&quot;.).</param>
        /// <param name="PlanConditionsUrl">Plan conditions URL with human readable information.</param>
        /// <param name="UpdatedAt">Timestamp of when service was updated.</param>
        /// <param name="SignatureKey">Service Descriptor Signature Key.</param>
        /// <param name="Authoritative">If the root domain of the service described by the entry is on the same DNS domain or on a DNS subdomain thereof..</param>
        /// <param name="Id">Service descriptor identifier.</param>
        public Data(PlanConditionsEnum? PlanConditions = default(PlanConditionsEnum?), SwaggerDocument Swagger = default(SwaggerDocument), List<Properties> Properties = default(List<Properties>), List<Contact> Contact = default(List<Contact>), List<Maintainers> Maintainers = default(List<Maintainers>), List<string> Tags = default(List<string>), string IntegrationMode = default(string), List<LevelOfServiceEnum> LevelOfService = default(List<LevelOfServiceEnum>), string Name = default(string), string Description = default(string), string Image = default(string), string BaseURL = default(string), string HumanURL = default(string), string AppName = default(string), string PackageName = default(string), string DeeplinkURL = default(string), string PlanConditionsUrl = default(string), string UpdatedAt = default(string), string SignatureKey = default(string), string Authoritative = default(string), string Id = default(string))
        {
            this.PlanConditions = PlanConditions;
            this.Swagger = Swagger;
            this.Properties = Properties;
            this.Contact = Contact;
            this.Maintainers = Maintainers;
            this.Tags = Tags;
            this.IntegrationMode = IntegrationMode;
            this.LevelOfService = LevelOfService;
            this.Name = Name;
            this.Description = Description;
            this.Image = Image;
            this.BaseURL = BaseURL;
            this.HumanURL = HumanURL;
            this.AppName = AppName;
            this.PackageName = PackageName;
            this.DeeplinkURL = DeeplinkURL;
            this.PlanConditionsUrl = PlanConditionsUrl;
            this.UpdatedAt = UpdatedAt;
            this.SignatureKey = SignatureKey;
            this.Authoritative = Authoritative;
            this.Id = Id;
        }
        

        /// <summary>
        /// Swagger file information
        /// </summary>
        /// <value>Swagger file information</value>
        [DataMember(Name="swagger", EmitDefaultValue=false)]
        public SwaggerDocument Swagger { get; set; }

        /// <summary>
        /// Properties service information
        /// </summary>
        /// <value>Properties service information</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<Properties> Properties { get; set; }

        /// <summary>
        /// Contact service information
        /// </summary>
        /// <value>Contact service information</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public List<Contact> Contact { get; set; }

        /// <summary>
        /// Maintainers service informatoin
        /// </summary>
        /// <value>Maintainers service informatoin</value>
        [DataMember(Name="maintainers", EmitDefaultValue=false)]
        public List<Maintainers> Maintainers { get; set; }

        /// <summary>
        /// Tags service information
        /// </summary>
        /// <value>Tags service information</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Information related to how the service is integrated
        /// </summary>
        /// <value>Information related to how the service is integrated</value>
        [DataMember(Name="integrationMode", EmitDefaultValue=false)]
        public string IntegrationMode { get; set; }


        /// <summary>
        /// Name of the service
        /// </summary>
        /// <value>Name of the service</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the service
        /// </summary>
        /// <value>Description of the service</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Image related of the service
        /// </summary>
        /// <value>Image related of the service</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Base URL of the service
        /// </summary>
        /// <value>Base URL of the service</value>
        [DataMember(Name="baseURL", EmitDefaultValue=false)]
        public string BaseURL { get; set; }

        /// <summary>
        /// URL of the human readable documentation
        /// </summary>
        /// <value>URL of the human readable documentation</value>
        [DataMember(Name="humanURL", EmitDefaultValue=false)]
        public string HumanURL { get; set; }

        /// <summary>
        /// App name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;Travel Concierge\&quot;
        /// </summary>
        /// <value>App name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;Travel Concierge\&quot;</value>
        [DataMember(Name="appName", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// Package name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;com.serviceprovider.travelconcierge\&quot;
        /// </summary>
        /// <value>Package name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;com.serviceprovider.travelconcierge\&quot;</value>
        [DataMember(Name="packageName", EmitDefaultValue=false)]
        public string PackageName { get; set; }

        /// <summary>
        /// Base deeplink URL of the service to integrate directly with application. (This attribute will appear only if integration mode is \&quot;app\&quot;.)
        /// </summary>
        /// <value>Base deeplink URL of the service to integrate directly with application. (This attribute will appear only if integration mode is \&quot;app\&quot;.)</value>
        [DataMember(Name="deeplinkURL", EmitDefaultValue=false)]
        public string DeeplinkURL { get; set; }

        /// <summary>
        /// Plan conditions URL with human readable information
        /// </summary>
        /// <value>Plan conditions URL with human readable information</value>
        [DataMember(Name="planConditionsUrl", EmitDefaultValue=false)]
        public string PlanConditionsUrl { get; set; }

        /// <summary>
        /// Timestamp of when service was updated
        /// </summary>
        /// <value>Timestamp of when service was updated</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Service Descriptor Signature Key
        /// </summary>
        /// <value>Service Descriptor Signature Key</value>
        [DataMember(Name="signatureKey", EmitDefaultValue=false)]
        public string SignatureKey { get; set; }

        /// <summary>
        /// If the root domain of the service described by the entry is on the same DNS domain or on a DNS subdomain thereof.
        /// </summary>
        /// <value>If the root domain of the service described by the entry is on the same DNS domain or on a DNS subdomain thereof.</value>
        [DataMember(Name="authoritative", EmitDefaultValue=false)]
        public string Authoritative { get; set; }

        /// <summary>
        /// Service descriptor identifier
        /// </summary>
        /// <value>Service descriptor identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Data {\n");
            sb.Append("  PlanConditions: ").Append(PlanConditions).Append("\n");
            sb.Append("  Swagger: ").Append(Swagger).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Maintainers: ").Append(Maintainers).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IntegrationMode: ").Append(IntegrationMode).Append("\n");
            sb.Append("  LevelOfService: ").Append(LevelOfService).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  BaseURL: ").Append(BaseURL).Append("\n");
            sb.Append("  HumanURL: ").Append(HumanURL).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  DeeplinkURL: ").Append(DeeplinkURL).Append("\n");
            sb.Append("  PlanConditionsUrl: ").Append(PlanConditionsUrl).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SignatureKey: ").Append(SignatureKey).Append("\n");
            sb.Append("  Authoritative: ").Append(Authoritative).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Data);
        }

        /// <summary>
        /// Returns true if Data instances are equal
        /// </summary>
        /// <param name="input">Instance of Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlanConditions == input.PlanConditions ||
                    (this.PlanConditions != null &&
                    this.PlanConditions.Equals(input.PlanConditions))
                ) && 
                (
                    this.Swagger == input.Swagger ||
                    (this.Swagger != null &&
                    this.Swagger.Equals(input.Swagger))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Contact == input.Contact ||
                    this.Contact != null &&
                    this.Contact.SequenceEqual(input.Contact)
                ) && 
                (
                    this.Maintainers == input.Maintainers ||
                    this.Maintainers != null &&
                    this.Maintainers.SequenceEqual(input.Maintainers)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.IntegrationMode == input.IntegrationMode ||
                    (this.IntegrationMode != null &&
                    this.IntegrationMode.Equals(input.IntegrationMode))
                ) && 
                (
                    this.LevelOfService == input.LevelOfService ||
                    this.LevelOfService != null &&
                    this.LevelOfService.SequenceEqual(input.LevelOfService)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.BaseURL == input.BaseURL ||
                    (this.BaseURL != null &&
                    this.BaseURL.Equals(input.BaseURL))
                ) && 
                (
                    this.HumanURL == input.HumanURL ||
                    (this.HumanURL != null &&
                    this.HumanURL.Equals(input.HumanURL))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.PackageName == input.PackageName ||
                    (this.PackageName != null &&
                    this.PackageName.Equals(input.PackageName))
                ) && 
                (
                    this.DeeplinkURL == input.DeeplinkURL ||
                    (this.DeeplinkURL != null &&
                    this.DeeplinkURL.Equals(input.DeeplinkURL))
                ) && 
                (
                    this.PlanConditionsUrl == input.PlanConditionsUrl ||
                    (this.PlanConditionsUrl != null &&
                    this.PlanConditionsUrl.Equals(input.PlanConditionsUrl))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.SignatureKey == input.SignatureKey ||
                    (this.SignatureKey != null &&
                    this.SignatureKey.Equals(input.SignatureKey))
                ) && 
                (
                    this.Authoritative == input.Authoritative ||
                    (this.Authoritative != null &&
                    this.Authoritative.Equals(input.Authoritative))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlanConditions != null)
                    hashCode = hashCode * 59 + this.PlanConditions.GetHashCode();
                if (this.Swagger != null)
                    hashCode = hashCode * 59 + this.Swagger.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Maintainers != null)
                    hashCode = hashCode * 59 + this.Maintainers.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.IntegrationMode != null)
                    hashCode = hashCode * 59 + this.IntegrationMode.GetHashCode();
                if (this.LevelOfService != null)
                    hashCode = hashCode * 59 + this.LevelOfService.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.BaseURL != null)
                    hashCode = hashCode * 59 + this.BaseURL.GetHashCode();
                if (this.HumanURL != null)
                    hashCode = hashCode * 59 + this.HumanURL.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.PackageName != null)
                    hashCode = hashCode * 59 + this.PackageName.GetHashCode();
                if (this.DeeplinkURL != null)
                    hashCode = hashCode * 59 + this.DeeplinkURL.GetHashCode();
                if (this.PlanConditionsUrl != null)
                    hashCode = hashCode * 59 + this.PlanConditionsUrl.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.SignatureKey != null)
                    hashCode = hashCode * 59 + this.SignatureKey.GetHashCode();
                if (this.Authoritative != null)
                    hashCode = hashCode * 59 + this.Authoritative.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
