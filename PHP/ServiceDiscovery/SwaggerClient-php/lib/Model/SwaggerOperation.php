<?php
/**
 * SwaggerOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MASAI Service Discovery API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SwaggerOperation Class Doc Comment
 *
 * @category    Class
 * @description Describes a JSON web service operation.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SwaggerOperation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SwaggerOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'tags' => 'string[]',
        'summary' => 'string',
        'description' => 'string',
        'external_docs' => '\Swagger\Client\Model\SwaggerExternalDocumentation',
        'operation_id' => 'string',
        'schemes' => 'string[]',
        'consumes' => 'string[]',
        'produces' => 'string[]',
        'parameters' => '\Swagger\Client\Model\SwaggerParameter[]',
        'responses' => 'map[string,\Swagger\Client\Model\SwaggerResponse]',
        'deprecated' => 'bool',
        'security' => 'map[string,string[]][]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'tags' => 'tags',
        'summary' => 'summary',
        'description' => 'description',
        'external_docs' => 'externalDocs',
        'operation_id' => 'operationId',
        'schemes' => 'schemes',
        'consumes' => 'consumes',
        'produces' => 'produces',
        'parameters' => 'parameters',
        'responses' => 'responses',
        'deprecated' => 'deprecated',
        'security' => 'security'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'tags' => 'setTags',
        'summary' => 'setSummary',
        'description' => 'setDescription',
        'external_docs' => 'setExternalDocs',
        'operation_id' => 'setOperationId',
        'schemes' => 'setSchemes',
        'consumes' => 'setConsumes',
        'produces' => 'setProduces',
        'parameters' => 'setParameters',
        'responses' => 'setResponses',
        'deprecated' => 'setDeprecated',
        'security' => 'setSecurity'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'tags' => 'getTags',
        'summary' => 'getSummary',
        'description' => 'getDescription',
        'external_docs' => 'getExternalDocs',
        'operation_id' => 'getOperationId',
        'schemes' => 'getSchemes',
        'consumes' => 'getConsumes',
        'produces' => 'getProduces',
        'parameters' => 'getParameters',
        'responses' => 'getResponses',
        'deprecated' => 'getDeprecated',
        'security' => 'getSecurity'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['external_docs'] = isset($data['external_docs']) ? $data['external_docs'] : null;
        $this->container['operation_id'] = isset($data['operation_id']) ? $data['operation_id'] : null;
        $this->container['schemes'] = isset($data['schemes']) ? $data['schemes'] : null;
        $this->container['consumes'] = isset($data['consumes']) ? $data['consumes'] : null;
        $this->container['produces'] = isset($data['produces']) ? $data['produces'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['responses'] = isset($data['responses']) ? $data['responses'] : null;
        $this->container['deprecated'] = isset($data['deprecated']) ? $data['deprecated'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['responses'] === null) {
            $invalid_properties[] = "'responses' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['responses'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags Gets or sets the tags.
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets summary
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     * @param string $summary Gets or sets the summary of the operation.
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Gets or sets the long description of the operation.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets external_docs
     * @return \Swagger\Client\Model\SwaggerExternalDocumentation
     */
    public function getExternalDocs()
    {
        return $this->container['external_docs'];
    }

    /**
     * Sets external_docs
     * @param \Swagger\Client\Model\SwaggerExternalDocumentation $external_docs Gets or sets the external documentation.
     * @return $this
     */
    public function setExternalDocs($external_docs)
    {
        $this->container['external_docs'] = $external_docs;

        return $this;
    }

    /**
     * Gets operation_id
     * @return string
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     * @param string $operation_id Gets or sets the operation ID (unique name).
     * @return $this
     */
    public function setOperationId($operation_id)
    {
        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets schemes
     * @return string[]
     */
    public function getSchemes()
    {
        return $this->container['schemes'];
    }

    /**
     * Sets schemes
     * @param string[] $schemes Gets or sets the schemes.
     * @return $this
     */
    public function setSchemes($schemes)
    {
        $this->container['schemes'] = $schemes;

        return $this;
    }

    /**
     * Gets consumes
     * @return string[]
     */
    public function getConsumes()
    {
        return $this->container['consumes'];
    }

    /**
     * Sets consumes
     * @param string[] $consumes Gets or sets a list of MIME types the operation can consume.
     * @return $this
     */
    public function setConsumes($consumes)
    {
        $this->container['consumes'] = $consumes;

        return $this;
    }

    /**
     * Gets produces
     * @return string[]
     */
    public function getProduces()
    {
        return $this->container['produces'];
    }

    /**
     * Sets produces
     * @param string[] $produces Gets or sets a list of MIME types the operation can produce.
     * @return $this
     */
    public function setProduces($produces)
    {
        $this->container['produces'] = $produces;

        return $this;
    }

    /**
     * Gets parameters
     * @return \Swagger\Client\Model\SwaggerParameter[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     * @param \Swagger\Client\Model\SwaggerParameter[] $parameters Gets or sets the parameters.
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets responses
     * @return map[string,\Swagger\Client\Model\SwaggerResponse]
     */
    public function getResponses()
    {
        return $this->container['responses'];
    }

    /**
     * Sets responses
     * @param map[string,\Swagger\Client\Model\SwaggerResponse] $responses Gets or sets the HTTP Status Code/Response pairs.
     * @return $this
     */
    public function setResponses($responses)
    {
        $this->container['responses'] = $responses;

        return $this;
    }

    /**
     * Gets deprecated
     * @return bool
     */
    public function getDeprecated()
    {
        return $this->container['deprecated'];
    }

    /**
     * Sets deprecated
     * @param bool $deprecated Gets or sets a value indicating whether the operation is deprecated.
     * @return $this
     */
    public function setDeprecated($deprecated)
    {
        $this->container['deprecated'] = $deprecated;

        return $this;
    }

    /**
     * Gets security
     * @return map[string,string[]][]
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     * @param map[string,string[]][] $security Gets or sets a security description.
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
