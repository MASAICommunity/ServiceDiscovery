<?php
/**
 * SwaggerDocumentPaths
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MASAI Service Discovery API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SwaggerDocumentPaths Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SwaggerDocumentPaths implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SwaggerDocument_paths';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'undefined' => '\Swagger\Client\Model\SwaggerOperation',
        'get' => '\Swagger\Client\Model\SwaggerOperation',
        'post' => '\Swagger\Client\Model\SwaggerOperation',
        'put' => '\Swagger\Client\Model\SwaggerOperation',
        'delete' => '\Swagger\Client\Model\SwaggerOperation',
        'options' => '\Swagger\Client\Model\SwaggerOperation',
        'head' => '\Swagger\Client\Model\SwaggerOperation',
        'patch' => '\Swagger\Client\Model\SwaggerOperation'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'undefined' => 'undefined',
        'get' => 'get',
        'post' => 'post',
        'put' => 'put',
        'delete' => 'delete',
        'options' => 'options',
        'head' => 'head',
        'patch' => 'patch'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'undefined' => 'setUndefined',
        'get' => 'setGet',
        'post' => 'setPost',
        'put' => 'setPut',
        'delete' => 'setDelete',
        'options' => 'setOptions',
        'head' => 'setHead',
        'patch' => 'setPatch'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'undefined' => 'getUndefined',
        'get' => 'getGet',
        'post' => 'getPost',
        'put' => 'getPut',
        'delete' => 'getDelete',
        'options' => 'getOptions',
        'head' => 'getHead',
        'patch' => 'getPatch'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['undefined'] = isset($data['undefined']) ? $data['undefined'] : null;
        $this->container['get'] = isset($data['get']) ? $data['get'] : null;
        $this->container['post'] = isset($data['post']) ? $data['post'] : null;
        $this->container['put'] = isset($data['put']) ? $data['put'] : null;
        $this->container['delete'] = isset($data['delete']) ? $data['delete'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['head'] = isset($data['head']) ? $data['head'] : null;
        $this->container['patch'] = isset($data['patch']) ? $data['patch'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets undefined
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getUndefined()
    {
        return $this->container['undefined'];
    }

    /**
     * Sets undefined
     * @param \Swagger\Client\Model\SwaggerOperation $undefined
     * @return $this
     */
    public function setUndefined($undefined)
    {
        $this->container['undefined'] = $undefined;

        return $this;
    }

    /**
     * Gets get
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getGet()
    {
        return $this->container['get'];
    }

    /**
     * Sets get
     * @param \Swagger\Client\Model\SwaggerOperation $get
     * @return $this
     */
    public function setGet($get)
    {
        $this->container['get'] = $get;

        return $this;
    }

    /**
     * Gets post
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getPost()
    {
        return $this->container['post'];
    }

    /**
     * Sets post
     * @param \Swagger\Client\Model\SwaggerOperation $post
     * @return $this
     */
    public function setPost($post)
    {
        $this->container['post'] = $post;

        return $this;
    }

    /**
     * Gets put
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getPut()
    {
        return $this->container['put'];
    }

    /**
     * Sets put
     * @param \Swagger\Client\Model\SwaggerOperation $put
     * @return $this
     */
    public function setPut($put)
    {
        $this->container['put'] = $put;

        return $this;
    }

    /**
     * Gets delete
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     * @param \Swagger\Client\Model\SwaggerOperation $delete
     * @return $this
     */
    public function setDelete($delete)
    {
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets options
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \Swagger\Client\Model\SwaggerOperation $options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets head
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     * @param \Swagger\Client\Model\SwaggerOperation $head
     * @return $this
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets patch
     * @return \Swagger\Client\Model\SwaggerOperation
     */
    public function getPatch()
    {
        return $this->container['patch'];
    }

    /**
     * Sets patch
     * @param \Swagger\Client\Model\SwaggerOperation $patch
     * @return $this
     */
    public function setPatch($patch)
    {
        $this->container['patch'] = $patch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
