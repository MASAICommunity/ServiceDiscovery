<?php
/**
 * Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MASAI Service Discovery API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Data Class Doc Comment
 *
 * @category    Class
 * @description Data
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Data implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'plan_conditions' => 'string',
        'swagger' => '\Swagger\Client\Model\SwaggerDocument',
        'properties' => '\Swagger\Client\Model\Properties[]',
        'contact' => '\Swagger\Client\Model\Contact[]',
        'maintainers' => '\Swagger\Client\Model\Maintainers[]',
        'tags' => 'string[]',
        'integration_mode' => 'string',
        'level_of_service' => 'string[]',
        'name' => 'string',
        'description' => 'string',
        'image' => 'string',
        'base_url' => 'string',
        'human_url' => 'string',
        'app_name' => 'string',
        'package_name' => 'string',
        'deeplink_url' => 'string',
        'plan_conditions_url' => 'string',
        'updated_at' => 'string',
        'signature_key' => 'string',
        'authoritative' => 'string',
        'id' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'plan_conditions' => 'planConditions',
        'swagger' => 'swagger',
        'properties' => 'properties',
        'contact' => 'contact',
        'maintainers' => 'maintainers',
        'tags' => 'tags',
        'integration_mode' => 'integrationMode',
        'level_of_service' => 'levelOfService',
        'name' => 'name',
        'description' => 'description',
        'image' => 'image',
        'base_url' => 'baseURL',
        'human_url' => 'humanURL',
        'app_name' => 'appName',
        'package_name' => 'packageName',
        'deeplink_url' => 'deeplinkURL',
        'plan_conditions_url' => 'planConditionsUrl',
        'updated_at' => 'updatedAt',
        'signature_key' => 'signatureKey',
        'authoritative' => 'authoritative',
        'id' => 'id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'plan_conditions' => 'setPlanConditions',
        'swagger' => 'setSwagger',
        'properties' => 'setProperties',
        'contact' => 'setContact',
        'maintainers' => 'setMaintainers',
        'tags' => 'setTags',
        'integration_mode' => 'setIntegrationMode',
        'level_of_service' => 'setLevelOfService',
        'name' => 'setName',
        'description' => 'setDescription',
        'image' => 'setImage',
        'base_url' => 'setBaseUrl',
        'human_url' => 'setHumanUrl',
        'app_name' => 'setAppName',
        'package_name' => 'setPackageName',
        'deeplink_url' => 'setDeeplinkUrl',
        'plan_conditions_url' => 'setPlanConditionsUrl',
        'updated_at' => 'setUpdatedAt',
        'signature_key' => 'setSignatureKey',
        'authoritative' => 'setAuthoritative',
        'id' => 'setId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'plan_conditions' => 'getPlanConditions',
        'swagger' => 'getSwagger',
        'properties' => 'getProperties',
        'contact' => 'getContact',
        'maintainers' => 'getMaintainers',
        'tags' => 'getTags',
        'integration_mode' => 'getIntegrationMode',
        'level_of_service' => 'getLevelOfService',
        'name' => 'getName',
        'description' => 'getDescription',
        'image' => 'getImage',
        'base_url' => 'getBaseUrl',
        'human_url' => 'getHumanUrl',
        'app_name' => 'getAppName',
        'package_name' => 'getPackageName',
        'deeplink_url' => 'getDeeplinkUrl',
        'plan_conditions_url' => 'getPlanConditionsUrl',
        'updated_at' => 'getUpdatedAt',
        'signature_key' => 'getSignatureKey',
        'authoritative' => 'getAuthoritative',
        'id' => 'getId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const PLAN_CONDITIONS_FREE = 'free';
    const PLAN_CONDITIONS_PAID = 'paid';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPlanConditionsAllowableValues()
    {
        return [
            self::PLAN_CONDITIONS_FREE,
            self::PLAN_CONDITIONS_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plan_conditions'] = isset($data['plan_conditions']) ? $data['plan_conditions'] : null;
        $this->container['swagger'] = isset($data['swagger']) ? $data['swagger'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['maintainers'] = isset($data['maintainers']) ? $data['maintainers'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['integration_mode'] = isset($data['integration_mode']) ? $data['integration_mode'] : null;
        $this->container['level_of_service'] = isset($data['level_of_service']) ? $data['level_of_service'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['base_url'] = isset($data['base_url']) ? $data['base_url'] : null;
        $this->container['human_url'] = isset($data['human_url']) ? $data['human_url'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
        $this->container['deeplink_url'] = isset($data['deeplink_url']) ? $data['deeplink_url'] : null;
        $this->container['plan_conditions_url'] = isset($data['plan_conditions_url']) ? $data['plan_conditions_url'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['signature_key'] = isset($data['signature_key']) ? $data['signature_key'] : null;
        $this->container['authoritative'] = isset($data['authoritative']) ? $data['authoritative'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("free", "paid");
        if (!in_array($this->container['plan_conditions'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'plan_conditions', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("free", "paid");
        if (!in_array($this->container['plan_conditions'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets plan_conditions
     * @return string
     */
    public function getPlanConditions()
    {
        return $this->container['plan_conditions'];
    }

    /**
     * Sets plan_conditions
     * @param string $plan_conditions Plan conditions of the service
     * @return $this
     */
    public function setPlanConditions($plan_conditions)
    {
        $allowed_values = array('free', 'paid');
        if (!in_array($plan_conditions, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'plan_conditions', must be one of 'free', 'paid'");
        }
        $this->container['plan_conditions'] = $plan_conditions;

        return $this;
    }

    /**
     * Gets swagger
     * @return \Swagger\Client\Model\SwaggerDocument
     */
    public function getSwagger()
    {
        return $this->container['swagger'];
    }

    /**
     * Sets swagger
     * @param \Swagger\Client\Model\SwaggerDocument $swagger Swagger file information
     * @return $this
     */
    public function setSwagger($swagger)
    {
        $this->container['swagger'] = $swagger;

        return $this;
    }

    /**
     * Gets properties
     * @return \Swagger\Client\Model\Properties[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     * @param \Swagger\Client\Model\Properties[] $properties Properties service information
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets contact
     * @return \Swagger\Client\Model\Contact[]
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Swagger\Client\Model\Contact[] $contact Contact service information
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets maintainers
     * @return \Swagger\Client\Model\Maintainers[]
     */
    public function getMaintainers()
    {
        return $this->container['maintainers'];
    }

    /**
     * Sets maintainers
     * @param \Swagger\Client\Model\Maintainers[] $maintainers Maintainers service informatoin
     * @return $this
     */
    public function setMaintainers($maintainers)
    {
        $this->container['maintainers'] = $maintainers;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags Tags service information
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets integration_mode
     * @return string
     */
    public function getIntegrationMode()
    {
        return $this->container['integration_mode'];
    }

    /**
     * Sets integration_mode
     * @param string $integration_mode Information related to how the service is integrated
     * @return $this
     */
    public function setIntegrationMode($integration_mode)
    {
        $this->container['integration_mode'] = $integration_mode;

        return $this;
    }

    /**
     * Gets level_of_service
     * @return string[]
     */
    public function getLevelOfService()
    {
        return $this->container['level_of_service'];
    }

    /**
     * Sets level_of_service
     * @param string[] $level_of_service Level of service provided
     * @return $this
     */
    public function setLevelOfService($level_of_service)
    {
        $this->container['level_of_service'] = $level_of_service;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the service
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the service
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image Image related of the service
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets base_url
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     * @param string $base_url Base URL of the service
     * @return $this
     */
    public function setBaseUrl($base_url)
    {
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets human_url
     * @return string
     */
    public function getHumanUrl()
    {
        return $this->container['human_url'];
    }

    /**
     * Sets human_url
     * @param string $human_url URL of the human readable documentation
     * @return $this
     */
    public function setHumanUrl($human_url)
    {
        $this->container['human_url'] = $human_url;

        return $this;
    }

    /**
     * Gets app_name
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     * @param string $app_name App name of the service if the integration mode is \"app\". E.g.: \"Travel Concierge\"
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets package_name
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     * @param string $package_name Package name of the service if the integration mode is \"app\". E.g.: \"com.serviceprovider.travelconcierge\"
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets deeplink_url
     * @return string
     */
    public function getDeeplinkUrl()
    {
        return $this->container['deeplink_url'];
    }

    /**
     * Sets deeplink_url
     * @param string $deeplink_url Base deeplink URL of the service to integrate directly with application. (This attribute will appear only if integration mode is \"app\".)
     * @return $this
     */
    public function setDeeplinkUrl($deeplink_url)
    {
        $this->container['deeplink_url'] = $deeplink_url;

        return $this;
    }

    /**
     * Gets plan_conditions_url
     * @return string
     */
    public function getPlanConditionsUrl()
    {
        return $this->container['plan_conditions_url'];
    }

    /**
     * Sets plan_conditions_url
     * @param string $plan_conditions_url Plan conditions URL with human readable information
     * @return $this
     */
    public function setPlanConditionsUrl($plan_conditions_url)
    {
        $this->container['plan_conditions_url'] = $plan_conditions_url;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Timestamp of when service was updated
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets signature_key
     * @return string
     */
    public function getSignatureKey()
    {
        return $this->container['signature_key'];
    }

    /**
     * Sets signature_key
     * @param string $signature_key Service Descriptor Signature Key
     * @return $this
     */
    public function setSignatureKey($signature_key)
    {
        $this->container['signature_key'] = $signature_key;

        return $this;
    }

    /**
     * Gets authoritative
     * @return string
     */
    public function getAuthoritative()
    {
        return $this->container['authoritative'];
    }

    /**
     * Sets authoritative
     * @param string $authoritative If the root domain of the service described by the entry is on the same DNS domain or on a DNS subdomain thereof.
     * @return $this
     */
    public function setAuthoritative($authoritative)
    {
        $this->container['authoritative'] = $authoritative;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Service descriptor identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
