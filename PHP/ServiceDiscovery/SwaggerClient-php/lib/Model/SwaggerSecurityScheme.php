<?php
/**
 * SwaggerSecurityScheme
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MASAI Service Discovery API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SwaggerSecurityScheme Class Doc Comment
 *
 * @category    Class
 * @description The definition of a security scheme that can be used by the operations.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SwaggerSecurityScheme implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SwaggerSecurityScheme';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'type' => 'string',
        'description' => 'string',
        'name' => 'string',
        'in' => 'string',
        'flow' => 'string',
        'authorization_url' => 'string',
        'token_url' => 'string',
        'scopes' => 'map[string,string]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'type' => 'type',
        'description' => 'description',
        'name' => 'name',
        'in' => 'in',
        'flow' => 'flow',
        'authorization_url' => 'authorizationUrl',
        'token_url' => 'tokenUrl',
        'scopes' => 'scopes'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'type' => 'setType',
        'description' => 'setDescription',
        'name' => 'setName',
        'in' => 'setIn',
        'flow' => 'setFlow',
        'authorization_url' => 'setAuthorizationUrl',
        'token_url' => 'setTokenUrl',
        'scopes' => 'setScopes'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'type' => 'getType',
        'description' => 'getDescription',
        'name' => 'getName',
        'in' => 'getIn',
        'flow' => 'getFlow',
        'authorization_url' => 'getAuthorizationUrl',
        'token_url' => 'getTokenUrl',
        'scopes' => 'getScopes'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_UNDEFINED = 'Undefined';
    const TYPE_BASIC = 'basic';
    const TYPE_API_KEY = 'apiKey';
    const TYPE_OAUTH2 = 'oauth2';
    const IN_UNDEFINED = 'Undefined';
    const IN_QUERY = 'query';
    const IN_HEADER = 'header';
    const FLOW_UNDEFINED = 'undefined';
    const FLOW_IMPLICIT = 'implicit';
    const FLOW_PASSWORD = 'password';
    const FLOW_APPLICATION = 'application';
    const FLOW_ACCESS_CODE = 'accessCode';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNDEFINED,
            self::TYPE_BASIC,
            self::TYPE_API_KEY,
            self::TYPE_OAUTH2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInAllowableValues()
    {
        return [
            self::IN_UNDEFINED,
            self::IN_QUERY,
            self::IN_HEADER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFlowAllowableValues()
    {
        return [
            self::FLOW_UNDEFINED,
            self::FLOW_IMPLICIT,
            self::FLOW_PASSWORD,
            self::FLOW_APPLICATION,
            self::FLOW_ACCESS_CODE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['in'] = isset($data['in']) ? $data['in'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['authorization_url'] = isset($data['authorization_url']) ? $data['authorization_url'] : null;
        $this->container['token_url'] = isset($data['token_url']) ? $data['token_url'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = array("Undefined", "basic", "apiKey", "oauth2");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }
        $allowed_values = array("Undefined", "query", "header");
        if (!in_array($this->container['in'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'in', must be one of #{allowed_values}.";
        }
        $allowed_values = array("undefined", "implicit", "password", "application", "accessCode");
        if (!in_array($this->container['flow'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'flow', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = array("Undefined", "basic", "apiKey", "oauth2");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("Undefined", "query", "header");
        if (!in_array($this->container['in'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("undefined", "implicit", "password", "application", "accessCode");
        if (!in_array($this->container['flow'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Gets or sets the type of the security scheme.
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('Undefined', 'basic', 'apiKey', 'oauth2');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Undefined', 'basic', 'apiKey', 'oauth2'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Gets or sets the short description for security scheme.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Gets or sets the name of the header or query parameter to be used to transmit the API key.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets in
     * @return string
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     * @param string $in Gets or sets the type of the API key.
     * @return $this
     */
    public function setIn($in)
    {
        $allowed_values = array('Undefined', 'query', 'header');
        if (!in_array($in, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'in', must be one of 'Undefined', 'query', 'header'");
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets flow
     * @return string
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     * @param string $flow Gets or sets the used by the OAuth2 security scheme.
     * @return $this
     */
    public function setFlow($flow)
    {
        $allowed_values = array('undefined', 'implicit', 'password', 'application', 'accessCode');
        if (!in_array($flow, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'flow', must be one of 'undefined', 'implicit', 'password', 'application', 'accessCode'");
        }
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets authorization_url
     * @return string
     */
    public function getAuthorizationUrl()
    {
        return $this->container['authorization_url'];
    }

    /**
     * Sets authorization_url
     * @param string $authorization_url Gets or sets the authorization URL to be used for this flow.
     * @return $this
     */
    public function setAuthorizationUrl($authorization_url)
    {
        $this->container['authorization_url'] = $authorization_url;

        return $this;
    }

    /**
     * Gets token_url
     * @return string
     */
    public function getTokenUrl()
    {
        return $this->container['token_url'];
    }

    /**
     * Sets token_url
     * @param string $token_url Gets or sets the token URL to be used for this flow. .
     * @return $this
     */
    public function setTokenUrl($token_url)
    {
        $this->container['token_url'] = $token_url;

        return $this;
    }

    /**
     * Gets scopes
     * @return map[string,string]
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     * @param map[string,string] $scopes Gets the available scopes for the OAuth2 security scheme.
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
