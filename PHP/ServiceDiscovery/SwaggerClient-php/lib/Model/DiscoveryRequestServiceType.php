<?php
/**
 * DiscoveryRequestServiceType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MASAI Service Discovery API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DiscoveryRequestServiceType Class Doc Comment
 *
 * @category    Class
 * @description Combination between the Group of Service and the Integration Mode (E.g.: Search for applications that performs the discovery process &#x3D;&amp;gt; \&quot;discovery\&quot;:\&quot;api\&quot;)
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DiscoveryRequestServiceType implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DiscoveryRequest_serviceType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'discovery' => 'string',
        'booking' => 'string',
        'reschedule' => 'string',
        'info' => 'string',
        'all' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'discovery' => 'discovery',
        'booking' => 'booking',
        'reschedule' => 'reschedule',
        'info' => 'info',
        'all' => 'all'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'discovery' => 'setDiscovery',
        'booking' => 'setBooking',
        'reschedule' => 'setReschedule',
        'info' => 'setInfo',
        'all' => 'setAll'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'discovery' => 'getDiscovery',
        'booking' => 'getBooking',
        'reschedule' => 'getReschedule',
        'info' => 'getInfo',
        'all' => 'getAll'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const DISCOVERY_WEB = 'web';
    const DISCOVERY_APP = 'app';
    const DISCOVERY_API = 'api';
    const DISCOVERY_DEEPLINK = 'deeplink';
    const DISCOVERY_ALL = 'all';
    const DISCOVERY_CONCIERGE_WEB = 'ConciergeWeb';
    const DISCOVERY_CONCIERGE_APP = 'ConciergeApp';
    const DISCOVERY_CONCIERGE_API = 'ConciergeAPI';
    const DISCOVERY_CONCIERGE_DEEPLINK = 'ConciergeDeeplink';
    const DISCOVERY_WIDGET = 'widget';
    const DISCOVERY_CONCIERGE_WIDGET = 'ConciergeWidget';
    const DISCOVERY_CONCIERGE_DIALOG = 'ConciergeDialog';
    const DISCOVERY_CHATSERVER = 'chatserver';
    const BOOKING_WEB = 'web';
    const BOOKING_APP = 'app';
    const BOOKING_API = 'api';
    const BOOKING_DEEPLINK = 'deeplink';
    const BOOKING_ALL = 'all';
    const BOOKING_CONCIERGE_WEB = 'ConciergeWeb';
    const BOOKING_CONCIERGE_APP = 'ConciergeApp';
    const BOOKING_CONCIERGE_API = 'ConciergeAPI';
    const BOOKING_CONCIERGE_DEEPLINK = 'ConciergeDeeplink';
    const BOOKING_WIDGET = 'widget';
    const BOOKING_CONCIERGE_WIDGET = 'ConciergeWidget';
    const BOOKING_CONCIERGE_DIALOG = 'ConciergeDialog';
    const BOOKING_CHATSERVER = 'chatserver';
    const RESCHEDULE_WEB = 'web';
    const RESCHEDULE_APP = 'app';
    const RESCHEDULE_API = 'api';
    const RESCHEDULE_DEEPLINK = 'deeplink';
    const RESCHEDULE_ALL = 'all';
    const RESCHEDULE_CONCIERGE_WEB = 'ConciergeWeb';
    const RESCHEDULE_CONCIERGE_APP = 'ConciergeApp';
    const RESCHEDULE_CONCIERGE_API = 'ConciergeAPI';
    const RESCHEDULE_CONCIERGE_DEEPLINK = 'ConciergeDeeplink';
    const RESCHEDULE_WIDGET = 'widget';
    const RESCHEDULE_CONCIERGE_WIDGET = 'ConciergeWidget';
    const RESCHEDULE_CONCIERGE_DIALOG = 'ConciergeDialog';
    const RESCHEDULE_CHATSERVER = 'chatserver';
    const INFO_WEB = 'web';
    const INFO_APP = 'app';
    const INFO_API = 'api';
    const INFO_DEEPLINK = 'deeplink';
    const INFO_ALL = 'all';
    const INFO_CONCIERGE_WEB = 'ConciergeWeb';
    const INFO_CONCIERGE_APP = 'ConciergeApp';
    const INFO_CONCIERGE_API = 'ConciergeAPI';
    const INFO_CONCIERGE_DEEPLINK = 'ConciergeDeeplink';
    const INFO_WIDGET = 'widget';
    const INFO_CONCIERGE_WIDGET = 'ConciergeWidget';
    const INFO_CONCIERGE_DIALOG = 'ConciergeDialog';
    const INFO_CHATSERVER = 'chatserver';
    const ALL_WEB = 'web';
    const ALL_APP = 'app';
    const ALL_API = 'api';
    const ALL_DEEPLINK = 'deeplink';
    const ALL_ALL = 'all';
    const ALL_CONCIERGE_WEB = 'ConciergeWeb';
    const ALL_CONCIERGE_APP = 'ConciergeApp';
    const ALL_CONCIERGE_API = 'ConciergeAPI';
    const ALL_CONCIERGE_DEEPLINK = 'ConciergeDeeplink';
    const ALL_WIDGET = 'widget';
    const ALL_CONCIERGE_WIDGET = 'ConciergeWidget';
    const ALL_CONCIERGE_DIALOG = 'ConciergeDialog';
    const ALL_CHATSERVER = 'chatserver';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDiscoveryAllowableValues()
    {
        return [
            self::DISCOVERY_WEB,
            self::DISCOVERY_APP,
            self::DISCOVERY_API,
            self::DISCOVERY_DEEPLINK,
            self::DISCOVERY_ALL,
            self::DISCOVERY_CONCIERGE_WEB,
            self::DISCOVERY_CONCIERGE_APP,
            self::DISCOVERY_CONCIERGE_API,
            self::DISCOVERY_CONCIERGE_DEEPLINK,
            self::DISCOVERY_WIDGET,
            self::DISCOVERY_CONCIERGE_WIDGET,
            self::DISCOVERY_CONCIERGE_DIALOG,
            self::DISCOVERY_CHATSERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBookingAllowableValues()
    {
        return [
            self::BOOKING_WEB,
            self::BOOKING_APP,
            self::BOOKING_API,
            self::BOOKING_DEEPLINK,
            self::BOOKING_ALL,
            self::BOOKING_CONCIERGE_WEB,
            self::BOOKING_CONCIERGE_APP,
            self::BOOKING_CONCIERGE_API,
            self::BOOKING_CONCIERGE_DEEPLINK,
            self::BOOKING_WIDGET,
            self::BOOKING_CONCIERGE_WIDGET,
            self::BOOKING_CONCIERGE_DIALOG,
            self::BOOKING_CHATSERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRescheduleAllowableValues()
    {
        return [
            self::RESCHEDULE_WEB,
            self::RESCHEDULE_APP,
            self::RESCHEDULE_API,
            self::RESCHEDULE_DEEPLINK,
            self::RESCHEDULE_ALL,
            self::RESCHEDULE_CONCIERGE_WEB,
            self::RESCHEDULE_CONCIERGE_APP,
            self::RESCHEDULE_CONCIERGE_API,
            self::RESCHEDULE_CONCIERGE_DEEPLINK,
            self::RESCHEDULE_WIDGET,
            self::RESCHEDULE_CONCIERGE_WIDGET,
            self::RESCHEDULE_CONCIERGE_DIALOG,
            self::RESCHEDULE_CHATSERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInfoAllowableValues()
    {
        return [
            self::INFO_WEB,
            self::INFO_APP,
            self::INFO_API,
            self::INFO_DEEPLINK,
            self::INFO_ALL,
            self::INFO_CONCIERGE_WEB,
            self::INFO_CONCIERGE_APP,
            self::INFO_CONCIERGE_API,
            self::INFO_CONCIERGE_DEEPLINK,
            self::INFO_WIDGET,
            self::INFO_CONCIERGE_WIDGET,
            self::INFO_CONCIERGE_DIALOG,
            self::INFO_CHATSERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAllAllowableValues()
    {
        return [
            self::ALL_WEB,
            self::ALL_APP,
            self::ALL_API,
            self::ALL_DEEPLINK,
            self::ALL_ALL,
            self::ALL_CONCIERGE_WEB,
            self::ALL_CONCIERGE_APP,
            self::ALL_CONCIERGE_API,
            self::ALL_CONCIERGE_DEEPLINK,
            self::ALL_WIDGET,
            self::ALL_CONCIERGE_WIDGET,
            self::ALL_CONCIERGE_DIALOG,
            self::ALL_CHATSERVER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['discovery'] = isset($data['discovery']) ? $data['discovery'] : null;
        $this->container['booking'] = isset($data['booking']) ? $data['booking'] : null;
        $this->container['reschedule'] = isset($data['reschedule']) ? $data['reschedule'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['all'] = isset($data['all']) ? $data['all'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['discovery'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'discovery', must be one of #{allowed_values}.";
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['booking'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'booking', must be one of #{allowed_values}.";
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['reschedule'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'reschedule', must be one of #{allowed_values}.";
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['info'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'info', must be one of #{allowed_values}.";
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['all'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'all', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['discovery'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['booking'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['reschedule'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['info'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("web", "app", "api", "deeplink", "all", "ConciergeWeb", "ConciergeApp", "ConciergeAPI", "ConciergeDeeplink", "widget", "ConciergeWidget", "ConciergeDialog", "chatserver");
        if (!in_array($this->container['all'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets discovery
     * @return string
     */
    public function getDiscovery()
    {
        return $this->container['discovery'];
    }

    /**
     * Sets discovery
     * @param string $discovery
     * @return $this
     */
    public function setDiscovery($discovery)
    {
        $allowed_values = array('web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver');
        if (!in_array($discovery, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'discovery', must be one of 'web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver'");
        }
        $this->container['discovery'] = $discovery;

        return $this;
    }

    /**
     * Gets booking
     * @return string
     */
    public function getBooking()
    {
        return $this->container['booking'];
    }

    /**
     * Sets booking
     * @param string $booking
     * @return $this
     */
    public function setBooking($booking)
    {
        $allowed_values = array('web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver');
        if (!in_array($booking, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'booking', must be one of 'web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver'");
        }
        $this->container['booking'] = $booking;

        return $this;
    }

    /**
     * Gets reschedule
     * @return string
     */
    public function getReschedule()
    {
        return $this->container['reschedule'];
    }

    /**
     * Sets reschedule
     * @param string $reschedule
     * @return $this
     */
    public function setReschedule($reschedule)
    {
        $allowed_values = array('web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver');
        if (!in_array($reschedule, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'reschedule', must be one of 'web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver'");
        }
        $this->container['reschedule'] = $reschedule;

        return $this;
    }

    /**
     * Gets info
     * @return string
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     * @param string $info
     * @return $this
     */
    public function setInfo($info)
    {
        $allowed_values = array('web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver');
        if (!in_array($info, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'info', must be one of 'web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver'");
        }
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets all
     * @return string
     */
    public function getAll()
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     * @param string $all
     * @return $this
     */
    public function setAll($all)
    {
        $allowed_values = array('web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver');
        if (!in_array($all, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'all', must be one of 'web', 'app', 'api', 'deeplink', 'all', 'ConciergeWeb', 'ConciergeApp', 'ConciergeAPI', 'ConciergeDeeplink', 'widget', 'ConciergeWidget', 'ConciergeDialog', 'chatserver'");
        }
        $this->container['all'] = $all;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
