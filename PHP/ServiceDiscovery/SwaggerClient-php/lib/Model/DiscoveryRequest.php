<?php
/**
 * DiscoveryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MASAI Service Discovery API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DiscoveryRequest Class Doc Comment
 *
 * @category    Class
 * @description Information containing the service description you want to search for
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DiscoveryRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DiscoveryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'location' => '\Swagger\Client\Model\Location',
        'price' => '\Swagger\Client\Model\Price',
        'rating' => '\Swagger\Client\Model\Rating',
        'group_of_module' => 'string',
        'access_key' => 'string',
        'providers' => 'string[]',
        'service_type' => '\Swagger\Client\Model\DiscoveryRequestServiceType'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'location' => 'location',
        'price' => 'price',
        'rating' => 'rating',
        'group_of_module' => 'groupOfModule',
        'access_key' => 'accessKey',
        'providers' => 'providers',
        'service_type' => 'serviceType'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'location' => 'setLocation',
        'price' => 'setPrice',
        'rating' => 'setRating',
        'group_of_module' => 'setGroupOfModule',
        'access_key' => 'setAccessKey',
        'providers' => 'setProviders',
        'service_type' => 'setServiceType'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'location' => 'getLocation',
        'price' => 'getPrice',
        'rating' => 'getRating',
        'group_of_module' => 'getGroupOfModule',
        'access_key' => 'getAccessKey',
        'providers' => 'getProviders',
        'service_type' => 'getServiceType'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['group_of_module'] = isset($data['group_of_module']) ? $data['group_of_module'] : null;
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['providers'] = isset($data['providers']) ? $data['providers'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['group_of_module'] === null) {
            $invalid_properties[] = "'group_of_module' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['group_of_module'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets location
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param \Swagger\Client\Model\Location $location Location information
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets price
     * @return \Swagger\Client\Model\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param \Swagger\Client\Model\Price $price Price range information
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets rating
     * @return \Swagger\Client\Model\Rating
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param \Swagger\Client\Model\Rating $rating Rating range information
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets group_of_module
     * @return string
     */
    public function getGroupOfModule()
    {
        return $this->container['group_of_module'];
    }

    /**
     * Sets group_of_module
     * @param string $group_of_module Group of module information (taxi|accomodation|train|flight|bus|tourism|all|car_sharing|bike_sharing|train_station_elevator|train_station_parking|car_rental|restaurant|coworkingspace|public_transport)
     * @return $this
     */
    public function setGroupOfModule($group_of_module)
    {
        $this->container['group_of_module'] = $group_of_module;

        return $this;
    }

    /**
     * Gets access_key
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     * @param string $access_key Google Custom Search Engine Access Key
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets providers
     * @return string[]
     */
    public function getProviders()
    {
        return $this->container['providers'];
    }

    /**
     * Sets providers
     * @param string[] $providers Search engines selected to search for (If none is selected, then the Service Discovery will search on all search engines)
     * @return $this
     */
    public function setProviders($providers)
    {
        $this->container['providers'] = $providers;

        return $this;
    }

    /**
     * Gets service_type
     * @return \Swagger\Client\Model\DiscoveryRequestServiceType
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     * @param \Swagger\Client\Model\DiscoveryRequestServiceType $service_type
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
