/*
 * MASAI Service Discovery API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SearchCriteria;
import io.swagger.client.model.SearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiscoverySearchEngineApi {
    private ApiClient apiClient;

    public DiscoverySearchEngineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiscoverySearchEngineApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiSearchForService
     * @param discoverApis Represent a service discovery object, used to performs search queries (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiSearchForServiceCall(SearchCriteria discoverApis, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = discoverApis;

        // create path and map variables
        String localVarPath = "/api/searchForServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiSearchForServiceValidateBeforeCall(SearchCriteria discoverApis, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'discoverApis' is set
        if (discoverApis == null) {
            throw new ApiException("Missing the required parameter 'discoverApis' when calling apiSearchForService(Async)");
        }
        

        com.squareup.okhttp.Call call = apiSearchForServiceCall(discoverApis, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for available services at a specific location
     * The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
     * @param discoverApis Represent a service discovery object, used to performs search queries (required)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResult apiSearchForService(SearchCriteria discoverApis) throws ApiException {
        ApiResponse<SearchResult> resp = apiSearchForServiceWithHttpInfo(discoverApis);
        return resp.getData();
    }

    /**
     * Search for available services at a specific location
     * The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
     * @param discoverApis Represent a service discovery object, used to performs search queries (required)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResult> apiSearchForServiceWithHttpInfo(SearchCriteria discoverApis) throws ApiException {
        com.squareup.okhttp.Call call = apiSearchForServiceValidateBeforeCall(discoverApis, null, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for available services at a specific location (asynchronously)
     * The MASAI Service Discovery is a key process allowing MASAI Services to be automatically visible by travellers through the use of concierge applications.    Usage example on searching for services that discover public transport services on Nice area that integrate via api:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 43.59491496946722,              \&quot;minLongitude\&quot;: 7.103082476562463,              \&quot;maxLatitude\&quot;: 43.7977308236023,              \&quot;maxLongitude\&quot;: 7.422884722656136,              \&quot;countries\&quot;: [                \&quot;fr\&quot;              ]            },            \&quot;groupOfModule\&quot;: \&quot;public_transport\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;discovery\&quot;: \&quot;api\&quot;            }          }        ]      }    Usage example on searching for services that book taxi services in Lisbon area that integrate via application, with price between € 5 and € 15:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 38.699871,              \&quot;minLongitude\&quot;: -9.172442,              \&quot;maxLatitude\&quot;: 38.752289,              \&quot;maxLongitude\&quot;: -9.116601,              \&quot;countries\&quot;: [                \&quot;pt\&quot;              ]            },            \&quot;price\&quot;: {              \&quot;minPrice\&quot;: 5,              \&quot;maxPrice\&quot;: 15            },            \&quot;groupOfModule\&quot;: \&quot;taxi\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;app\&quot;            }          }        ]      }    Usage example on searching for services that book flight services in Berlin area that integrate via web page, with ratings between 2 and 5 stars:        {        \&quot;discoveryRequest\&quot;: [          {            \&quot;location\&quot;: {              \&quot;minLatitude\&quot;: 52.354300665733305,              \&quot;minLongitude\&quot;: 13.068658648437463,              \&quot;maxLatitude\&quot;: 52.68542940506577,              \&quot;maxLongitude\&quot;: 13.696078082031136,              \&quot;countries\&quot;: [                \&quot;de\&quot;              ]            },            \&quot;rating\&quot;: {              \&quot;minRating\&quot;: 2,              \&quot;maxRating\&quot;: 5            },            \&quot;groupOfModule\&quot;: \&quot;flight\&quot;,            \&quot;accessKey\&quot;: \&quot;AIzaSyD7q2VfSG9tptzWNegQMNb6lqhkuWFy_k0\&quot;,            \&quot;providers\&quot;: [              \&quot;google\&quot;,              \&quot;apis\&quot;            ],            \&quot;serviceType\&quot;: {              \&quot;booking\&quot;: \&quot;web\&quot;            }          }        ]      }
     * @param discoverApis Represent a service discovery object, used to performs search queries (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiSearchForServiceAsync(SearchCriteria discoverApis, final ApiCallback<SearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiSearchForServiceValidateBeforeCall(discoverApis, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
