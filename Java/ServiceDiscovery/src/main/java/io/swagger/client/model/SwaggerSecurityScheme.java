/*
 * MASAI Service Discovery API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The definition of a security scheme that can be used by the operations.
 */
@ApiModel(description = "The definition of a security scheme that can be used by the operations.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-07T16:09:20.617+01:00")
public class SwaggerSecurityScheme {
  /**
   * Gets or sets the type of the security scheme.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNDEFINED("Undefined"),
    
    BASIC("basic"),
    
    APIKEY("apiKey"),
    
    OAUTH2("oauth2");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or sets the type of the API key.
   */
  @JsonAdapter(InEnum.Adapter.class)
  public enum InEnum {
    UNDEFINED("Undefined"),
    
    QUERY("query"),
    
    HEADER("header");

    private String value;

    InEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InEnum fromValue(String text) {
      for (InEnum b : InEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("in")
  private InEnum in = null;

  /**
   * Gets or sets the used by the OAuth2 security scheme.
   */
  @JsonAdapter(FlowEnum.Adapter.class)
  public enum FlowEnum {
    UNDEFINED("undefined"),
    
    IMPLICIT("implicit"),
    
    PASSWORD("password"),
    
    APPLICATION("application"),
    
    ACCESSCODE("accessCode");

    private String value;

    FlowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlowEnum fromValue(String text) {
      for (FlowEnum b : FlowEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FlowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlowEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FlowEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("flow")
  private FlowEnum flow = null;

  @SerializedName("authorizationUrl")
  private String authorizationUrl = null;

  @SerializedName("tokenUrl")
  private String tokenUrl = null;

  @SerializedName("scopes")
  private Map<String, String> scopes = null;

  public SwaggerSecurityScheme type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Gets or sets the type of the security scheme.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Gets or sets the type of the security scheme.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SwaggerSecurityScheme description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Gets or sets the short description for security scheme.
   * @return description
  **/
  @ApiModelProperty(value = "Gets or sets the short description for security scheme.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SwaggerSecurityScheme name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Gets or sets the name of the header or query parameter to be used to transmit the API key.
   * @return name
  **/
  @ApiModelProperty(value = "Gets or sets the name of the header or query parameter to be used to transmit the API key.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SwaggerSecurityScheme in(InEnum in) {
    this.in = in;
    return this;
  }

   /**
   * Gets or sets the type of the API key.
   * @return in
  **/
  @ApiModelProperty(value = "Gets or sets the type of the API key.")
  public InEnum getIn() {
    return in;
  }

  public void setIn(InEnum in) {
    this.in = in;
  }

  public SwaggerSecurityScheme flow(FlowEnum flow) {
    this.flow = flow;
    return this;
  }

   /**
   * Gets or sets the used by the OAuth2 security scheme.
   * @return flow
  **/
  @ApiModelProperty(value = "Gets or sets the used by the OAuth2 security scheme.")
  public FlowEnum getFlow() {
    return flow;
  }

  public void setFlow(FlowEnum flow) {
    this.flow = flow;
  }

  public SwaggerSecurityScheme authorizationUrl(String authorizationUrl) {
    this.authorizationUrl = authorizationUrl;
    return this;
  }

   /**
   * Gets or sets the authorization URL to be used for this flow.
   * @return authorizationUrl
  **/
  @ApiModelProperty(value = "Gets or sets the authorization URL to be used for this flow.")
  public String getAuthorizationUrl() {
    return authorizationUrl;
  }

  public void setAuthorizationUrl(String authorizationUrl) {
    this.authorizationUrl = authorizationUrl;
  }

  public SwaggerSecurityScheme tokenUrl(String tokenUrl) {
    this.tokenUrl = tokenUrl;
    return this;
  }

   /**
   * Gets or sets the token URL to be used for this flow. .
   * @return tokenUrl
  **/
  @ApiModelProperty(value = "Gets or sets the token URL to be used for this flow. .")
  public String getTokenUrl() {
    return tokenUrl;
  }

  public void setTokenUrl(String tokenUrl) {
    this.tokenUrl = tokenUrl;
  }

  public SwaggerSecurityScheme scopes(Map<String, String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public SwaggerSecurityScheme putScopesItem(String key, String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new HashMap<String, String>();
    }
    this.scopes.put(key, scopesItem);
    return this;
  }

   /**
   * Gets the available scopes for the OAuth2 security scheme.
   * @return scopes
  **/
  @ApiModelProperty(value = "Gets the available scopes for the OAuth2 security scheme.")
  public Map<String, String> getScopes() {
    return scopes;
  }

  public void setScopes(Map<String, String> scopes) {
    this.scopes = scopes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwaggerSecurityScheme swaggerSecurityScheme = (SwaggerSecurityScheme) o;
    return Objects.equals(this.type, swaggerSecurityScheme.type) &&
        Objects.equals(this.description, swaggerSecurityScheme.description) &&
        Objects.equals(this.name, swaggerSecurityScheme.name) &&
        Objects.equals(this.in, swaggerSecurityScheme.in) &&
        Objects.equals(this.flow, swaggerSecurityScheme.flow) &&
        Objects.equals(this.authorizationUrl, swaggerSecurityScheme.authorizationUrl) &&
        Objects.equals(this.tokenUrl, swaggerSecurityScheme.tokenUrl) &&
        Objects.equals(this.scopes, swaggerSecurityScheme.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, description, name, in, flow, authorizationUrl, tokenUrl, scopes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwaggerSecurityScheme {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    authorizationUrl: ").append(toIndentedString(authorizationUrl)).append("\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

