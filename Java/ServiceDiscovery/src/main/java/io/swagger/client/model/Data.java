/*
 * MASAI Service Discovery API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Contact;
import io.swagger.client.model.Maintainers;
import io.swagger.client.model.Properties;
import io.swagger.client.model.SwaggerDocument;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Data
 */
@ApiModel(description = "Data")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-07T16:09:20.617+01:00")
public class Data {
  /**
   * Plan conditions of the service
   */
  @JsonAdapter(PlanConditionsEnum.Adapter.class)
  public enum PlanConditionsEnum {
    FREE("free"),
    
    PAID("paid");

    private String value;

    PlanConditionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlanConditionsEnum fromValue(String text) {
      for (PlanConditionsEnum b : PlanConditionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlanConditionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanConditionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanConditionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlanConditionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("planConditions")
  private PlanConditionsEnum planConditions = null;

  @SerializedName("swagger")
  private SwaggerDocument swagger = null;

  @SerializedName("properties")
  private List<Properties> properties = null;

  @SerializedName("contact")
  private List<Contact> contact = null;

  @SerializedName("maintainers")
  private List<Maintainers> maintainers = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("integrationMode")
  private String integrationMode = null;

  /**
   * Gets or Sets levelOfService
   */
  @JsonAdapter(LevelOfServiceEnum.Adapter.class)
  public enum LevelOfServiceEnum {
    VIP("VIP"),
    
    ECONOMY("Economy"),
    
    REGULAR("Regular"),
    
    LUXURY("Luxury"),
    
    EXECUTIVE("Executive"),
    
    EXCLUSIVE("Exclusive"),
    
    DELUXE("Deluxe");

    private String value;

    LevelOfServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelOfServiceEnum fromValue(String text) {
      for (LevelOfServiceEnum b : LevelOfServiceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LevelOfServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelOfServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelOfServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LevelOfServiceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("levelOfService")
  private List<LevelOfServiceEnum> levelOfService = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("baseURL")
  private String baseURL = null;

  @SerializedName("humanURL")
  private String humanURL = null;

  @SerializedName("appName")
  private String appName = null;

  @SerializedName("packageName")
  private String packageName = null;

  @SerializedName("deeplinkURL")
  private String deeplinkURL = null;

  @SerializedName("planConditionsUrl")
  private String planConditionsUrl = null;

  @SerializedName("updatedAt")
  private String updatedAt = null;

  @SerializedName("signatureKey")
  private String signatureKey = null;

  @SerializedName("authoritative")
  private String authoritative = null;

  @SerializedName("id")
  private String id = null;

  public Data planConditions(PlanConditionsEnum planConditions) {
    this.planConditions = planConditions;
    return this;
  }

   /**
   * Plan conditions of the service
   * @return planConditions
  **/
  @ApiModelProperty(value = "Plan conditions of the service")
  public PlanConditionsEnum getPlanConditions() {
    return planConditions;
  }

  public void setPlanConditions(PlanConditionsEnum planConditions) {
    this.planConditions = planConditions;
  }

  public Data swagger(SwaggerDocument swagger) {
    this.swagger = swagger;
    return this;
  }

   /**
   * Swagger file information
   * @return swagger
  **/
  @ApiModelProperty(value = "Swagger file information")
  public SwaggerDocument getSwagger() {
    return swagger;
  }

  public void setSwagger(SwaggerDocument swagger) {
    this.swagger = swagger;
  }

  public Data properties(List<Properties> properties) {
    this.properties = properties;
    return this;
  }

  public Data addPropertiesItem(Properties propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<Properties>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Properties service information
   * @return properties
  **/
  @ApiModelProperty(value = "Properties service information")
  public List<Properties> getProperties() {
    return properties;
  }

  public void setProperties(List<Properties> properties) {
    this.properties = properties;
  }

  public Data contact(List<Contact> contact) {
    this.contact = contact;
    return this;
  }

  public Data addContactItem(Contact contactItem) {
    if (this.contact == null) {
      this.contact = new ArrayList<Contact>();
    }
    this.contact.add(contactItem);
    return this;
  }

   /**
   * Contact service information
   * @return contact
  **/
  @ApiModelProperty(value = "Contact service information")
  public List<Contact> getContact() {
    return contact;
  }

  public void setContact(List<Contact> contact) {
    this.contact = contact;
  }

  public Data maintainers(List<Maintainers> maintainers) {
    this.maintainers = maintainers;
    return this;
  }

  public Data addMaintainersItem(Maintainers maintainersItem) {
    if (this.maintainers == null) {
      this.maintainers = new ArrayList<Maintainers>();
    }
    this.maintainers.add(maintainersItem);
    return this;
  }

   /**
   * Maintainers service informatoin
   * @return maintainers
  **/
  @ApiModelProperty(value = "Maintainers service informatoin")
  public List<Maintainers> getMaintainers() {
    return maintainers;
  }

  public void setMaintainers(List<Maintainers> maintainers) {
    this.maintainers = maintainers;
  }

  public Data tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Data addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags service information
   * @return tags
  **/
  @ApiModelProperty(value = "Tags service information")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public Data integrationMode(String integrationMode) {
    this.integrationMode = integrationMode;
    return this;
  }

   /**
   * Information related to how the service is integrated
   * @return integrationMode
  **/
  @ApiModelProperty(value = "Information related to how the service is integrated")
  public String getIntegrationMode() {
    return integrationMode;
  }

  public void setIntegrationMode(String integrationMode) {
    this.integrationMode = integrationMode;
  }

  public Data levelOfService(List<LevelOfServiceEnum> levelOfService) {
    this.levelOfService = levelOfService;
    return this;
  }

  public Data addLevelOfServiceItem(LevelOfServiceEnum levelOfServiceItem) {
    if (this.levelOfService == null) {
      this.levelOfService = new ArrayList<LevelOfServiceEnum>();
    }
    this.levelOfService.add(levelOfServiceItem);
    return this;
  }

   /**
   * Level of service provided
   * @return levelOfService
  **/
  @ApiModelProperty(value = "Level of service provided")
  public List<LevelOfServiceEnum> getLevelOfService() {
    return levelOfService;
  }

  public void setLevelOfService(List<LevelOfServiceEnum> levelOfService) {
    this.levelOfService = levelOfService;
  }

  public Data name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the service
   * @return name
  **/
  @ApiModelProperty(value = "Name of the service")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Data description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the service
   * @return description
  **/
  @ApiModelProperty(value = "Description of the service")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Data image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Image related of the service
   * @return image
  **/
  @ApiModelProperty(value = "Image related of the service")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public Data baseURL(String baseURL) {
    this.baseURL = baseURL;
    return this;
  }

   /**
   * Base URL of the service
   * @return baseURL
  **/
  @ApiModelProperty(value = "Base URL of the service")
  public String getBaseURL() {
    return baseURL;
  }

  public void setBaseURL(String baseURL) {
    this.baseURL = baseURL;
  }

  public Data humanURL(String humanURL) {
    this.humanURL = humanURL;
    return this;
  }

   /**
   * URL of the human readable documentation
   * @return humanURL
  **/
  @ApiModelProperty(value = "URL of the human readable documentation")
  public String getHumanURL() {
    return humanURL;
  }

  public void setHumanURL(String humanURL) {
    this.humanURL = humanURL;
  }

  public Data appName(String appName) {
    this.appName = appName;
    return this;
  }

   /**
   * App name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;Travel Concierge\&quot;
   * @return appName
  **/
  @ApiModelProperty(value = "App name of the service if the integration mode is \"app\". E.g.: \"Travel Concierge\"")
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }

  public Data packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

   /**
   * Package name of the service if the integration mode is \&quot;app\&quot;. E.g.: \&quot;com.serviceprovider.travelconcierge\&quot;
   * @return packageName
  **/
  @ApiModelProperty(value = "Package name of the service if the integration mode is \"app\". E.g.: \"com.serviceprovider.travelconcierge\"")
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }

  public Data deeplinkURL(String deeplinkURL) {
    this.deeplinkURL = deeplinkURL;
    return this;
  }

   /**
   * Base deeplink URL of the service to integrate directly with application. (This attribute will appear only if integration mode is \&quot;app\&quot;.)
   * @return deeplinkURL
  **/
  @ApiModelProperty(value = "Base deeplink URL of the service to integrate directly with application. (This attribute will appear only if integration mode is \"app\".)")
  public String getDeeplinkURL() {
    return deeplinkURL;
  }

  public void setDeeplinkURL(String deeplinkURL) {
    this.deeplinkURL = deeplinkURL;
  }

  public Data planConditionsUrl(String planConditionsUrl) {
    this.planConditionsUrl = planConditionsUrl;
    return this;
  }

   /**
   * Plan conditions URL with human readable information
   * @return planConditionsUrl
  **/
  @ApiModelProperty(value = "Plan conditions URL with human readable information")
  public String getPlanConditionsUrl() {
    return planConditionsUrl;
  }

  public void setPlanConditionsUrl(String planConditionsUrl) {
    this.planConditionsUrl = planConditionsUrl;
  }

  public Data updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp of when service was updated
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Timestamp of when service was updated")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Data signatureKey(String signatureKey) {
    this.signatureKey = signatureKey;
    return this;
  }

   /**
   * Service Descriptor Signature Key
   * @return signatureKey
  **/
  @ApiModelProperty(value = "Service Descriptor Signature Key")
  public String getSignatureKey() {
    return signatureKey;
  }

  public void setSignatureKey(String signatureKey) {
    this.signatureKey = signatureKey;
  }

  public Data authoritative(String authoritative) {
    this.authoritative = authoritative;
    return this;
  }

   /**
   * If the root domain of the service described by the entry is on the same DNS domain or on a DNS subdomain thereof.
   * @return authoritative
  **/
  @ApiModelProperty(value = "If the root domain of the service described by the entry is on the same DNS domain or on a DNS subdomain thereof.")
  public String getAuthoritative() {
    return authoritative;
  }

  public void setAuthoritative(String authoritative) {
    this.authoritative = authoritative;
  }

  public Data id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Service descriptor identifier
   * @return id
  **/
  @ApiModelProperty(value = "Service descriptor identifier")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data data = (Data) o;
    return Objects.equals(this.planConditions, data.planConditions) &&
        Objects.equals(this.swagger, data.swagger) &&
        Objects.equals(this.properties, data.properties) &&
        Objects.equals(this.contact, data.contact) &&
        Objects.equals(this.maintainers, data.maintainers) &&
        Objects.equals(this.tags, data.tags) &&
        Objects.equals(this.integrationMode, data.integrationMode) &&
        Objects.equals(this.levelOfService, data.levelOfService) &&
        Objects.equals(this.name, data.name) &&
        Objects.equals(this.description, data.description) &&
        Objects.equals(this.image, data.image) &&
        Objects.equals(this.baseURL, data.baseURL) &&
        Objects.equals(this.humanURL, data.humanURL) &&
        Objects.equals(this.appName, data.appName) &&
        Objects.equals(this.packageName, data.packageName) &&
        Objects.equals(this.deeplinkURL, data.deeplinkURL) &&
        Objects.equals(this.planConditionsUrl, data.planConditionsUrl) &&
        Objects.equals(this.updatedAt, data.updatedAt) &&
        Objects.equals(this.signatureKey, data.signatureKey) &&
        Objects.equals(this.authoritative, data.authoritative) &&
        Objects.equals(this.id, data.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planConditions, swagger, properties, contact, maintainers, tags, integrationMode, levelOfService, name, description, image, baseURL, humanURL, appName, packageName, deeplinkURL, planConditionsUrl, updatedAt, signatureKey, authoritative, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data {\n");
    
    sb.append("    planConditions: ").append(toIndentedString(planConditions)).append("\n");
    sb.append("    swagger: ").append(toIndentedString(swagger)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    maintainers: ").append(toIndentedString(maintainers)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    integrationMode: ").append(toIndentedString(integrationMode)).append("\n");
    sb.append("    levelOfService: ").append(toIndentedString(levelOfService)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    baseURL: ").append(toIndentedString(baseURL)).append("\n");
    sb.append("    humanURL: ").append(toIndentedString(humanURL)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    deeplinkURL: ").append(toIndentedString(deeplinkURL)).append("\n");
    sb.append("    planConditionsUrl: ").append(toIndentedString(planConditionsUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    signatureKey: ").append(toIndentedString(signatureKey)).append("\n");
    sb.append("    authoritative: ").append(toIndentedString(authoritative)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

