/*
 * MASAI Service Discovery API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Combination between the Group of Service and the Integration Mode (E.g.: Search for applications that performs the discovery process &#x3D;&amp;gt; \&quot;discovery\&quot;:\&quot;api\&quot;)
 */
@ApiModel(description = "Combination between the Group of Service and the Integration Mode (E.g.: Search for applications that performs the discovery process =&gt; \"discovery\":\"api\")")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-07T16:09:20.617+01:00")
public class DiscoveryRequestServiceType {
  /**
   * Gets or Sets discovery
   */
  @JsonAdapter(DiscoveryEnum.Adapter.class)
  public enum DiscoveryEnum {
    WEB("web"),
    
    APP("app"),
    
    API("api"),
    
    DEEPLINK("deeplink"),
    
    ALL("all"),
    
    CONCIERGEWEB("ConciergeWeb"),
    
    CONCIERGEAPP("ConciergeApp"),
    
    CONCIERGEAPI("ConciergeAPI"),
    
    CONCIERGEDEEPLINK("ConciergeDeeplink"),
    
    WIDGET("widget"),
    
    CONCIERGEWIDGET("ConciergeWidget"),
    
    CONCIERGEDIALOG("ConciergeDialog"),
    
    CHATSERVER("chatserver");

    private String value;

    DiscoveryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscoveryEnum fromValue(String text) {
      for (DiscoveryEnum b : DiscoveryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DiscoveryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscoveryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscoveryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DiscoveryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("discovery")
  private DiscoveryEnum discovery = null;

  /**
   * Gets or Sets booking
   */
  @JsonAdapter(BookingEnum.Adapter.class)
  public enum BookingEnum {
    WEB("web"),
    
    APP("app"),
    
    API("api"),
    
    DEEPLINK("deeplink"),
    
    ALL("all"),
    
    CONCIERGEWEB("ConciergeWeb"),
    
    CONCIERGEAPP("ConciergeApp"),
    
    CONCIERGEAPI("ConciergeAPI"),
    
    CONCIERGEDEEPLINK("ConciergeDeeplink"),
    
    WIDGET("widget"),
    
    CONCIERGEWIDGET("ConciergeWidget"),
    
    CONCIERGEDIALOG("ConciergeDialog"),
    
    CHATSERVER("chatserver");

    private String value;

    BookingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BookingEnum fromValue(String text) {
      for (BookingEnum b : BookingEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BookingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BookingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BookingEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BookingEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("booking")
  private BookingEnum booking = null;

  /**
   * Gets or Sets reschedule
   */
  @JsonAdapter(RescheduleEnum.Adapter.class)
  public enum RescheduleEnum {
    WEB("web"),
    
    APP("app"),
    
    API("api"),
    
    DEEPLINK("deeplink"),
    
    ALL("all"),
    
    CONCIERGEWEB("ConciergeWeb"),
    
    CONCIERGEAPP("ConciergeApp"),
    
    CONCIERGEAPI("ConciergeAPI"),
    
    CONCIERGEDEEPLINK("ConciergeDeeplink"),
    
    WIDGET("widget"),
    
    CONCIERGEWIDGET("ConciergeWidget"),
    
    CONCIERGEDIALOG("ConciergeDialog"),
    
    CHATSERVER("chatserver");

    private String value;

    RescheduleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RescheduleEnum fromValue(String text) {
      for (RescheduleEnum b : RescheduleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RescheduleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RescheduleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RescheduleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RescheduleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("reschedule")
  private RescheduleEnum reschedule = null;

  /**
   * Gets or Sets info
   */
  @JsonAdapter(InfoEnum.Adapter.class)
  public enum InfoEnum {
    WEB("web"),
    
    APP("app"),
    
    API("api"),
    
    DEEPLINK("deeplink"),
    
    ALL("all"),
    
    CONCIERGEWEB("ConciergeWeb"),
    
    CONCIERGEAPP("ConciergeApp"),
    
    CONCIERGEAPI("ConciergeAPI"),
    
    CONCIERGEDEEPLINK("ConciergeDeeplink"),
    
    WIDGET("widget"),
    
    CONCIERGEWIDGET("ConciergeWidget"),
    
    CONCIERGEDIALOG("ConciergeDialog"),
    
    CHATSERVER("chatserver");

    private String value;

    InfoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InfoEnum fromValue(String text) {
      for (InfoEnum b : InfoEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InfoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InfoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InfoEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InfoEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("info")
  private InfoEnum info = null;

  /**
   * Gets or Sets all
   */
  @JsonAdapter(AllEnum.Adapter.class)
  public enum AllEnum {
    WEB("web"),
    
    APP("app"),
    
    API("api"),
    
    DEEPLINK("deeplink"),
    
    ALL("all"),
    
    CONCIERGEWEB("ConciergeWeb"),
    
    CONCIERGEAPP("ConciergeApp"),
    
    CONCIERGEAPI("ConciergeAPI"),
    
    CONCIERGEDEEPLINK("ConciergeDeeplink"),
    
    WIDGET("widget"),
    
    CONCIERGEWIDGET("ConciergeWidget"),
    
    CONCIERGEDIALOG("ConciergeDialog"),
    
    CHATSERVER("chatserver");

    private String value;

    AllEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllEnum fromValue(String text) {
      for (AllEnum b : AllEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AllEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AllEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("all")
  private AllEnum all = null;

  public DiscoveryRequestServiceType discovery(DiscoveryEnum discovery) {
    this.discovery = discovery;
    return this;
  }

   /**
   * Get discovery
   * @return discovery
  **/
  @ApiModelProperty(value = "")
  public DiscoveryEnum getDiscovery() {
    return discovery;
  }

  public void setDiscovery(DiscoveryEnum discovery) {
    this.discovery = discovery;
  }

  public DiscoveryRequestServiceType booking(BookingEnum booking) {
    this.booking = booking;
    return this;
  }

   /**
   * Get booking
   * @return booking
  **/
  @ApiModelProperty(value = "")
  public BookingEnum getBooking() {
    return booking;
  }

  public void setBooking(BookingEnum booking) {
    this.booking = booking;
  }

  public DiscoveryRequestServiceType reschedule(RescheduleEnum reschedule) {
    this.reschedule = reschedule;
    return this;
  }

   /**
   * Get reschedule
   * @return reschedule
  **/
  @ApiModelProperty(value = "")
  public RescheduleEnum getReschedule() {
    return reschedule;
  }

  public void setReschedule(RescheduleEnum reschedule) {
    this.reschedule = reschedule;
  }

  public DiscoveryRequestServiceType info(InfoEnum info) {
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @ApiModelProperty(value = "")
  public InfoEnum getInfo() {
    return info;
  }

  public void setInfo(InfoEnum info) {
    this.info = info;
  }

  public DiscoveryRequestServiceType all(AllEnum all) {
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @ApiModelProperty(value = "")
  public AllEnum getAll() {
    return all;
  }

  public void setAll(AllEnum all) {
    this.all = all;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryRequestServiceType discoveryRequestServiceType = (DiscoveryRequestServiceType) o;
    return Objects.equals(this.discovery, discoveryRequestServiceType.discovery) &&
        Objects.equals(this.booking, discoveryRequestServiceType.booking) &&
        Objects.equals(this.reschedule, discoveryRequestServiceType.reschedule) &&
        Objects.equals(this.info, discoveryRequestServiceType.info) &&
        Objects.equals(this.all, discoveryRequestServiceType.all);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discovery, booking, reschedule, info, all);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryRequestServiceType {\n");
    
    sb.append("    discovery: ").append(toIndentedString(discovery)).append("\n");
    sb.append("    booking: ").append(toIndentedString(booking)).append("\n");
    sb.append("    reschedule: ").append(toIndentedString(reschedule)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

