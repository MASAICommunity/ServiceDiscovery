/**
 * MASAI Service Discovery API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceDiscovery);
  }
}(this, function(expect, ServiceDiscovery) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceDiscovery.SwaggerDocument();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SwaggerDocument', function() {
    it('should create an instance of SwaggerDocument', function() {
      // uncomment below and update the code to test SwaggerDocument
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be.a(ServiceDiscovery.SwaggerDocument);
    });

    it('should have the property xGenerator (base name: "x-generator")', function() {
      // uncomment below and update the code to test the property xGenerator
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property swagger (base name: "swagger")', function() {
      // uncomment below and update the code to test the property swagger
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property info (base name: "info")', function() {
      // uncomment below and update the code to test the property info
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property basePath (base name: "basePath")', function() {
      // uncomment below and update the code to test the property basePath
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property schemes (base name: "schemes")', function() {
      // uncomment below and update the code to test the property schemes
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property consumes (base name: "consumes")', function() {
      // uncomment below and update the code to test the property consumes
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property produces (base name: "produces")', function() {
      // uncomment below and update the code to test the property produces
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property paths (base name: "paths")', function() {
      // uncomment below and update the code to test the property paths
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property definitions (base name: "definitions")', function() {
      // uncomment below and update the code to test the property definitions
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property responses (base name: "responses")', function() {
      // uncomment below and update the code to test the property responses
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property securityDefinitions (base name: "securityDefinitions")', function() {
      // uncomment below and update the code to test the property securityDefinitions
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property security (base name: "security")', function() {
      // uncomment below and update the code to test the property security
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

    it('should have the property externalDocs (base name: "externalDocs")', function() {
      // uncomment below and update the code to test the property externalDocs
      //var instane = new ServiceDiscovery.SwaggerDocument();
      //expect(instance).to.be();
    });

  });

}));
