/**
 * MASAI Service Discovery API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceDiscovery);
  }
}(this, function(expect, ServiceDiscovery) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceDiscovery.JsonSchema4();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JsonSchema4', function() {
    it('should create an instance of JsonSchema4', function() {
      // uncomment below and update the code to test JsonSchema4
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be.a(ServiceDiscovery.JsonSchema4);
    });

    it('should have the property schema (base name: "$schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property discriminator (base name: "discriminator")', function() {
      // uncomment below and update the code to test the property discriminator
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property schemaReferencePath (base name: "schemaReferencePath")', function() {
      // uncomment below and update the code to test the property schemaReferencePath
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property format (base name: "format")', function() {
      // uncomment below and update the code to test the property format
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property _default (base name: "default")', function() {
      // uncomment below and update the code to test the property _default
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property multipleOf (base name: "multipleOf")', function() {
      // uncomment below and update the code to test the property multipleOf
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property maximum (base name: "maximum")', function() {
      // uncomment below and update the code to test the property maximum
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property exclusiveMaximum (base name: "exclusiveMaximum")', function() {
      // uncomment below and update the code to test the property exclusiveMaximum
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property minimum (base name: "minimum")', function() {
      // uncomment below and update the code to test the property minimum
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property exclusiveMinimum (base name: "exclusiveMinimum")', function() {
      // uncomment below and update the code to test the property exclusiveMinimum
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property maxLength (base name: "maxLength")', function() {
      // uncomment below and update the code to test the property maxLength
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property minLength (base name: "minLength")', function() {
      // uncomment below and update the code to test the property minLength
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property pattern (base name: "pattern")', function() {
      // uncomment below and update the code to test the property pattern
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property maxItems (base name: "maxItems")', function() {
      // uncomment below and update the code to test the property maxItems
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property minItems (base name: "minItems")', function() {
      // uncomment below and update the code to test the property minItems
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property uniqueItems (base name: "uniqueItems")', function() {
      // uncomment below and update the code to test the property uniqueItems
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property maxProperties (base name: "maxProperties")', function() {
      // uncomment below and update the code to test the property maxProperties
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property minProperties (base name: "minProperties")', function() {
      // uncomment below and update the code to test the property minProperties
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property xml (base name: "xml")', function() {
      // uncomment below and update the code to test the property xml
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property not (base name: "not")', function() {
      // uncomment below and update the code to test the property not
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property additionalItems (base name: "additionalItems")', function() {
      // uncomment below and update the code to test the property additionalItems
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property additionalProperties (base name: "additionalProperties")', function() {
      // uncomment below and update the code to test the property additionalProperties
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property patternProperties (base name: "patternProperties")', function() {
      // uncomment below and update the code to test the property patternProperties
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property definitions (base name: "definitions")', function() {
      // uncomment below and update the code to test the property definitions
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property xEnumNames (base name: "x-enumNames")', function() {
      // uncomment below and update the code to test the property xEnumNames
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property _enum (base name: "enum")', function() {
      // uncomment below and update the code to test the property _enum
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property allOf (base name: "allOf")', function() {
      // uncomment below and update the code to test the property allOf
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property anyOf (base name: "anyOf")', function() {
      // uncomment below and update the code to test the property anyOf
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

    it('should have the property oneOf (base name: "oneOf")', function() {
      // uncomment below and update the code to test the property oneOf
      //var instane = new ServiceDiscovery.JsonSchema4();
      //expect(instance).to.be();
    });

  });

}));
